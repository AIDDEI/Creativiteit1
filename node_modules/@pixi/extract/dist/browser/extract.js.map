{"version":3,"file":"extract.js","sources":["../../src/Extract.ts"],"sourcesContent":["import { CanvasRenderTarget } from '@pixi/utils';\nimport { Rectangle } from '@pixi/math';\nimport { RenderTexture } from '@pixi/core';\n\nimport type { Renderer, IRendererPlugin } from '@pixi/core';\nimport type { DisplayObject } from '@pixi/display';\n\nconst TEMP_RECT = new Rectangle();\nconst BYTES_PER_PIXEL = 4;\n\n/**\n * This class provides renderer-specific plugins for exporting content from a renderer.\n * For instance, these plugins can be used for saving an Image, Canvas element or for exporting the raw image data (pixels).\n *\n * Do not instantiate these plugins directly. It is available from the `renderer.plugins` property.\n * See {@link PIXI.CanvasRenderer#plugins} or {@link PIXI.Renderer#plugins}.\n *\n * @example\n * // Create a new app (will auto-add extract plugin to renderer)\n * const app = new PIXI.Application();\n *\n * // Draw a red circle\n * const graphics = new PIXI.Graphics()\n *     .beginFill(0xFF0000)\n *     .drawCircle(0, 0, 50);\n *\n * // Render the graphics as an HTMLImageElement\n * const image = app.renderer.plugins.extract.image(graphics);\n * document.body.appendChild(image);\n *\n * @memberof PIXI\n */\nexport class Extract implements IRendererPlugin\n{\n    private renderer: Renderer;\n\n    /**\n     * @param renderer - A reference to the current renderer\n     */\n    constructor(renderer: Renderer)\n    {\n        this.renderer = renderer;\n    }\n\n    /**\n     * Will return a HTML Image of the target\n     *\n     * @param target - A displayObject or renderTexture\n     *  to convert. If left empty will use the main renderer\n     * @param format - Image format, e.g. \"image/jpeg\" or \"image/webp\".\n     * @param quality - JPEG or Webp compression from 0 to 1. Default is 0.92.\n     * @return - HTML Image of the target\n     */\n    public image(target: DisplayObject|RenderTexture, format?: string, quality?: number): HTMLImageElement\n    {\n        const image = new Image();\n\n        image.src = this.base64(target, format, quality);\n\n        return image;\n    }\n\n    /**\n     * Will return a base64 encoded string of this target. It works by calling\n     *  `Extract.getCanvas` and then running toDataURL on that.\n     *\n     * @param target - A displayObject or renderTexture\n     *  to convert. If left empty will use the main renderer\n     * @param format - Image format, e.g. \"image/jpeg\" or \"image/webp\".\n     * @param quality - JPEG or Webp compression from 0 to 1. Default is 0.92.\n     * @return - A base64 encoded string of the texture.\n     */\n    public base64(target: DisplayObject|RenderTexture, format?: string, quality?: number): string\n    {\n        return this.canvas(target).toDataURL(format, quality);\n    }\n\n    /**\n     * Creates a Canvas element, renders this target to it and then returns it.\n     *\n     * @param target - A displayObject or renderTexture\n     *  to convert. If left empty will use the main renderer\n     * @return - A Canvas element with the texture rendered on.\n     */\n    public canvas(target: DisplayObject|RenderTexture): HTMLCanvasElement\n    {\n        const renderer = this.renderer;\n        let resolution;\n        let frame;\n        let flipY = false;\n        let renderTexture;\n        let generated = false;\n\n        if (target)\n        {\n            if (target instanceof RenderTexture)\n            {\n                renderTexture = target;\n            }\n            else\n            {\n                renderTexture = this.renderer.generateTexture(target);\n                generated = true;\n            }\n        }\n\n        if (renderTexture)\n        {\n            resolution = renderTexture.baseTexture.resolution;\n            frame = renderTexture.frame;\n            flipY = false;\n            renderer.renderTexture.bind(renderTexture);\n        }\n        else\n        {\n            resolution = this.renderer.resolution;\n\n            flipY = true;\n\n            frame = TEMP_RECT;\n            frame.width = this.renderer.width;\n            frame.height = this.renderer.height;\n\n            renderer.renderTexture.bind(null);\n        }\n\n        const width = Math.floor((frame.width * resolution) + 1e-4);\n        const height = Math.floor((frame.height * resolution) + 1e-4);\n\n        let canvasBuffer = new CanvasRenderTarget(width, height, 1);\n\n        const webglPixels = new Uint8Array(BYTES_PER_PIXEL * width * height);\n\n        // read pixels to the array\n        const gl = renderer.gl;\n\n        gl.readPixels(\n            frame.x * resolution,\n            frame.y * resolution,\n            width,\n            height,\n            gl.RGBA,\n            gl.UNSIGNED_BYTE,\n            webglPixels\n        );\n\n        // add the pixels to the canvas\n        const canvasData = canvasBuffer.context.getImageData(0, 0, width, height);\n\n        Extract.arrayPostDivide(webglPixels, canvasData.data);\n\n        canvasBuffer.context.putImageData(canvasData, 0, 0);\n\n        // pulling pixels\n        if (flipY)\n        {\n            const target = new CanvasRenderTarget(canvasBuffer.width, canvasBuffer.height, 1);\n\n            target.context.scale(1, -1);\n\n            // we can't render to itself because we should be empty before render.\n            target.context.drawImage(canvasBuffer.canvas, 0, -height);\n\n            canvasBuffer.destroy();\n            canvasBuffer = target;\n        }\n\n        if (generated)\n        {\n            renderTexture.destroy(true);\n        }\n\n        // send the canvas back..\n        return canvasBuffer.canvas;\n    }\n\n    /**\n     * Will return a one-dimensional array containing the pixel data of the entire texture in RGBA\n     * order, with integer values between 0 and 255 (included).\n     *\n     * @param target - A displayObject or renderTexture\n     *  to convert. If left empty will use the main renderer\n     * @return - One-dimensional array containing the pixel data of the entire texture\n     */\n    public pixels(target?: DisplayObject|RenderTexture): Uint8Array\n    {\n        const renderer = this.renderer;\n        let resolution;\n        let frame;\n        let renderTexture;\n        let generated = false;\n\n        if (target)\n        {\n            if (target instanceof RenderTexture)\n            {\n                renderTexture = target;\n            }\n            else\n            {\n                renderTexture = this.renderer.generateTexture(target);\n                generated = true;\n            }\n        }\n\n        if (renderTexture)\n        {\n            resolution = renderTexture.baseTexture.resolution;\n            frame = renderTexture.frame;\n\n            // bind the buffer\n            renderer.renderTexture.bind(renderTexture);\n        }\n        else\n        {\n            resolution = renderer.resolution;\n\n            frame = TEMP_RECT;\n            frame.width = renderer.width;\n            frame.height = renderer.height;\n\n            renderer.renderTexture.bind(null);\n        }\n\n        const width = frame.width * resolution;\n        const height = frame.height * resolution;\n\n        const webglPixels = new Uint8Array(BYTES_PER_PIXEL * width * height);\n\n        // read pixels to the array\n        const gl = renderer.gl;\n\n        gl.readPixels(\n            frame.x * resolution,\n            frame.y * resolution,\n            width,\n            height,\n            gl.RGBA,\n            gl.UNSIGNED_BYTE,\n            webglPixels\n        );\n\n        if (generated)\n        {\n            renderTexture.destroy(true);\n        }\n\n        Extract.arrayPostDivide(webglPixels, webglPixels);\n\n        return webglPixels;\n    }\n\n    /** Destroys the extract. */\n    public destroy(): void\n    {\n        this.renderer = null;\n    }\n\n    /**\n     * Takes premultiplied pixel data and produces regular pixel data\n     *\n     * @private\n     * @param pixels - array of pixel data\n     * @param out - output array\n     */\n    static arrayPostDivide(\n        pixels: number[] | Uint8Array | Uint8ClampedArray, out: number[] | Uint8Array | Uint8ClampedArray\n    ): void\n    {\n        for (let i = 0; i < pixels.length; i += 4)\n        {\n            const alpha = out[i + 3] = pixels[i + 3];\n\n            if (alpha !== 0)\n            {\n                out[i] = Math.round(Math.min(pixels[i] * 255.0 / alpha, 255.0));\n                out[i + 1] = Math.round(Math.min(pixels[i + 1] * 255.0 / alpha, 255.0));\n                out[i + 2] = Math.round(Math.min(pixels[i + 2] * 255.0 / alpha, 255.0));\n            }\n            else\n            {\n                out[i] = pixels[i];\n                out[i + 1] = pixels[i + 1];\n                out[i + 2] = pixels[i + 2];\n            }\n        }\n    }\n}\n"],"names":["Rectangle","RenderTexture","CanvasRenderTarget"],"mappings":";;;;;;;;;;;IAOA,IAAM,SAAS,GAAG,IAAIA,cAAS,EAAE,CAAC;IAClC,IAAM,eAAe,GAAG,CAAC,CAAC;IAE1B;;;;;;;;;;;;;;;;;;;;;IAqBG;AACH,QAAA,OAAA,kBAAA,YAAA;IAII;;IAEG;IACH,IAAA,SAAA,OAAA,CAAY,QAAkB,EAAA;IAE1B,QAAA,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;SAC5B;IAED;;;;;;;;IAQG;IACI,IAAA,OAAA,CAAA,SAAA,CAAA,KAAK,GAAZ,UAAa,MAAmC,EAAE,MAAe,EAAE,OAAgB,EAAA;IAE/E,QAAA,IAAM,KAAK,GAAG,IAAI,KAAK,EAAE,CAAC;IAE1B,QAAA,KAAK,CAAC,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;IAEjD,QAAA,OAAO,KAAK,CAAC;SAChB,CAAA;IAED;;;;;;;;;IASG;IACI,IAAA,OAAA,CAAA,SAAA,CAAA,MAAM,GAAb,UAAc,MAAmC,EAAE,MAAe,EAAE,OAAgB,EAAA;IAEhF,QAAA,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;SACzD,CAAA;IAED;;;;;;IAMG;QACI,OAAM,CAAA,SAAA,CAAA,MAAA,GAAb,UAAc,MAAmC,EAAA;IAE7C,QAAA,IAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;IAC/B,QAAA,IAAI,UAAU,CAAC;IACf,QAAA,IAAI,KAAK,CAAC;YACV,IAAI,KAAK,GAAG,KAAK,CAAC;IAClB,QAAA,IAAI,aAAa,CAAC;YAClB,IAAI,SAAS,GAAG,KAAK,CAAC;IAEtB,QAAA,IAAI,MAAM,EACV;gBACI,IAAI,MAAM,YAAYC,kBAAa,EACnC;oBACI,aAAa,GAAG,MAAM,CAAC;IAC1B,aAAA;IAED,iBAAA;oBACI,aAAa,GAAG,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;oBACtD,SAAS,GAAG,IAAI,CAAC;IACpB,aAAA;IACJ,SAAA;IAED,QAAA,IAAI,aAAa,EACjB;IACI,YAAA,UAAU,GAAG,aAAa,CAAC,WAAW,CAAC,UAAU,CAAC;IAClD,YAAA,KAAK,GAAG,aAAa,CAAC,KAAK,CAAC;gBAC5B,KAAK,GAAG,KAAK,CAAC;IACd,YAAA,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IAC9C,SAAA;IAED,aAAA;IACI,YAAA,UAAU,GAAG,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC;gBAEtC,KAAK,GAAG,IAAI,CAAC;gBAEb,KAAK,GAAG,SAAS,CAAC;gBAClB,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC;gBAClC,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC;IAEpC,YAAA,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACrC,SAAA;IAED,QAAA,IAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,KAAK,GAAG,UAAU,IAAI,IAAI,CAAC,CAAC;IAC5D,QAAA,IAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,MAAM,GAAG,UAAU,IAAI,IAAI,CAAC,CAAC;YAE9D,IAAI,YAAY,GAAG,IAAIC,wBAAkB,CAAC,KAAK,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC;YAE5D,IAAM,WAAW,GAAG,IAAI,UAAU,CAAC,eAAe,GAAG,KAAK,GAAG,MAAM,CAAC,CAAC;;IAGrE,QAAA,IAAM,EAAE,GAAG,QAAQ,CAAC,EAAE,CAAC;IAEvB,QAAA,EAAE,CAAC,UAAU,CACT,KAAK,CAAC,CAAC,GAAG,UAAU,EACpB,KAAK,CAAC,CAAC,GAAG,UAAU,EACpB,KAAK,EACL,MAAM,EACN,EAAE,CAAC,IAAI,EACP,EAAE,CAAC,aAAa,EAChB,WAAW,CACd,CAAC;;IAGF,QAAA,IAAM,UAAU,GAAG,YAAY,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;YAE1E,OAAO,CAAC,eAAe,CAAC,WAAW,EAAE,UAAU,CAAC,IAAI,CAAC,CAAC;YAEtD,YAAY,CAAC,OAAO,CAAC,YAAY,CAAC,UAAU,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;;IAGpD,QAAA,IAAI,KAAK,EACT;IACI,YAAA,IAAM,QAAM,GAAG,IAAIA,wBAAkB,CAAC,YAAY,CAAC,KAAK,EAAE,YAAY,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;gBAElF,QAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;;IAG5B,YAAA,QAAM,CAAC,OAAO,CAAC,SAAS,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC;gBAE1D,YAAY,CAAC,OAAO,EAAE,CAAC;gBACvB,YAAY,GAAG,QAAM,CAAC;IACzB,SAAA;IAED,QAAA,IAAI,SAAS,EACb;IACI,YAAA,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IAC/B,SAAA;;YAGD,OAAO,YAAY,CAAC,MAAM,CAAC;SAC9B,CAAA;IAED;;;;;;;IAOG;QACI,OAAM,CAAA,SAAA,CAAA,MAAA,GAAb,UAAc,MAAoC,EAAA;IAE9C,QAAA,IAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;IAC/B,QAAA,IAAI,UAAU,CAAC;IACf,QAAA,IAAI,KAAK,CAAC;IACV,QAAA,IAAI,aAAa,CAAC;YAClB,IAAI,SAAS,GAAG,KAAK,CAAC;IAEtB,QAAA,IAAI,MAAM,EACV;gBACI,IAAI,MAAM,YAAYD,kBAAa,EACnC;oBACI,aAAa,GAAG,MAAM,CAAC;IAC1B,aAAA;IAED,iBAAA;oBACI,aAAa,GAAG,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;oBACtD,SAAS,GAAG,IAAI,CAAC;IACpB,aAAA;IACJ,SAAA;IAED,QAAA,IAAI,aAAa,EACjB;IACI,YAAA,UAAU,GAAG,aAAa,CAAC,WAAW,CAAC,UAAU,CAAC;IAClD,YAAA,KAAK,GAAG,aAAa,CAAC,KAAK,CAAC;;IAG5B,YAAA,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IAC9C,SAAA;IAED,aAAA;IACI,YAAA,UAAU,GAAG,QAAQ,CAAC,UAAU,CAAC;gBAEjC,KAAK,GAAG,SAAS,CAAC;IAClB,YAAA,KAAK,CAAC,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC;IAC7B,YAAA,KAAK,CAAC,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC;IAE/B,YAAA,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACrC,SAAA;IAED,QAAA,IAAM,KAAK,GAAG,KAAK,CAAC,KAAK,GAAG,UAAU,CAAC;IACvC,QAAA,IAAM,MAAM,GAAG,KAAK,CAAC,MAAM,GAAG,UAAU,CAAC;YAEzC,IAAM,WAAW,GAAG,IAAI,UAAU,CAAC,eAAe,GAAG,KAAK,GAAG,MAAM,CAAC,CAAC;;IAGrE,QAAA,IAAM,EAAE,GAAG,QAAQ,CAAC,EAAE,CAAC;IAEvB,QAAA,EAAE,CAAC,UAAU,CACT,KAAK,CAAC,CAAC,GAAG,UAAU,EACpB,KAAK,CAAC,CAAC,GAAG,UAAU,EACpB,KAAK,EACL,MAAM,EACN,EAAE,CAAC,IAAI,EACP,EAAE,CAAC,aAAa,EAChB,WAAW,CACd,CAAC;IAEF,QAAA,IAAI,SAAS,EACb;IACI,YAAA,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IAC/B,SAAA;IAED,QAAA,OAAO,CAAC,eAAe,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;IAElD,QAAA,OAAO,WAAW,CAAC;SACtB,CAAA;;IAGM,IAAA,OAAA,CAAA,SAAA,CAAA,OAAO,GAAd,YAAA;IAEI,QAAA,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;SACxB,CAAA;IAED;;;;;;IAMG;IACI,IAAA,OAAA,CAAA,eAAe,GAAtB,UACI,MAAiD,EAAE,GAA8C,EAAA;IAGjG,QAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EACzC;IACI,YAAA,IAAM,KAAK,GAAG,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBAEzC,IAAI,KAAK,KAAK,CAAC,EACf;oBACI,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,KAAK,GAAG,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC;IAChE,gBAAA,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,GAAG,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC;IACxE,gBAAA,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,GAAG,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC;IAC3E,aAAA;IAED,iBAAA;oBACI,GAAG,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;IACnB,gBAAA,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IAC3B,gBAAA,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IAC9B,aAAA;IACJ,SAAA;SACJ,CAAA;QACL,OAAC,OAAA,CAAA;IAAD,CAAC,EAAA;;;;;;;;;;;;;;;"}