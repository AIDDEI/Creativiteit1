{"version":3,"file":"spritesheet.min.js","sources":["../../src/Spritesheet.ts","../../src/SpritesheetLoader.ts"],"sourcesContent":["import { Rectangle } from '@pixi/math';\nimport { Texture, BaseTexture } from '@pixi/core';\nimport { getResolutionOfUrl } from '@pixi/utils';\nimport type { Dict } from '@pixi/utils';\nimport type { ImageResource } from '@pixi/core';\nimport type { IPointData } from '@pixi/math';\n\n/**\n * Represents the JSON data for a spritesheet atlas.\n */\nexport interface ISpritesheetFrameData {\n    frame: {\n        x: number;\n        y: number;\n        w: number;\n        h: number;\n    };\n    trimmed?: boolean;\n    rotated?: boolean;\n    sourceSize?: {\n        w: number;\n        h: number;\n    };\n    spriteSourceSize?: {\n        x: number;\n        y: number;\n    };\n    anchor?: IPointData;\n}\n\n/**\n * Atlas format.\n */\nexport interface ISpritesheetData {\n    frames: Dict<ISpritesheetFrameData>;\n    animations?: Dict<string[]>;\n    meta: {\n        scale: string;\n    };\n}\n\n/**\n * Utility class for maintaining reference to a collection\n * of Textures on a single Spritesheet.\n *\n * To access a sprite sheet from your code pass its JSON data file to Pixi's loader:\n *\n * ```js\n * PIXI.Loader.shared.add(\"images/spritesheet.json\").load(setup);\n *\n * function setup() {\n *   let sheet = PIXI.Loader.shared.resources[\"images/spritesheet.json\"].spritesheet;\n *   ...\n * }\n * ```\n * With the `sheet.textures` you can create Sprite objects,`sheet.animations` can be used to create an AnimatedSprite.\n *\n * Sprite sheets can be packed using tools like {@link https://codeandweb.com/texturepacker|TexturePacker},\n * {@link https://renderhjs.net/shoebox/|Shoebox} or {@link https://github.com/krzysztof-o/spritesheet.js|Spritesheet.js}.\n * Default anchor points (see {@link PIXI.Texture#defaultAnchor}) and grouping of animation sprites are currently only\n * supported by TexturePacker.\n *\n * @memberof PIXI\n */\nexport class Spritesheet\n{\n    /** The maximum number of Textures to build per process. */\n    static readonly BATCH_SIZE = 1000;\n\n    /** Reference to ths source texture. */\n    public baseTexture: BaseTexture;\n\n    /**\n     * A map containing all textures of the sprite sheet.\n     * Can be used to create a {@link PIXI.Sprite|Sprite}:\n     * ```js\n     * new PIXI.Sprite(sheet.textures[\"image.png\"]);\n     * ```\n     */\n    public textures: Dict<Texture>;\n\n    /**\n     * A map containing the textures for each animation.\n     * Can be used to create an {@link PIXI.AnimatedSprite|AnimatedSprite}:\n     * ```js\n     * new PIXI.AnimatedSprite(sheet.animations[\"anim_name\"])\n     * ```\n     */\n    public animations: Dict<Texture[]>;\n\n    /**\n     * Reference to the original JSON data.\n     * @type {Object}\n     */\n    public data: ISpritesheetData;\n\n    /** The resolution of the spritesheet. */\n    public resolution: number;\n\n    /**\n     * Reference to original source image from the Loader. This reference is retained so we\n     * can destroy the Texture later on. It is never used internally.\n     */\n    private _texture: Texture;\n\n    /**\n     * Map of spritesheet frames.\n     * @type {Object}\n     */\n    private _frames: Dict<ISpritesheetFrameData>;\n\n    /** Collection of frame names. */\n    private _frameKeys: string[];\n\n    /** Current batch index being processed. */\n    private _batchIndex: number;\n\n    /**\n     * Callback when parse is completed.\n     * @type {Function}\n     */\n    private _callback: (textures: Dict<Texture>) => void;\n\n    /**\n     * @param baseTexture - Reference to the source BaseTexture object.\n     * @param {Object} data - Spritesheet image data.\n     * @param resolutionFilename - The filename to consider when determining\n     *        the resolution of the spritesheet. If not provided, the imageUrl will\n     *        be used on the BaseTexture.\n     */\n    constructor(texture: BaseTexture | Texture, data: ISpritesheetData, resolutionFilename: string = null)\n    {\n        this._texture = texture instanceof Texture ? texture : null;\n        this.baseTexture = texture instanceof BaseTexture ? texture : this._texture.baseTexture;\n        this.textures = {};\n        this.animations = {};\n        this.data = data;\n\n        const resource = this.baseTexture.resource as ImageResource;\n\n        this.resolution = this._updateResolution(resolutionFilename || (resource ? resource.url : null));\n        this._frames = this.data.frames;\n        this._frameKeys = Object.keys(this._frames);\n        this._batchIndex = 0;\n        this._callback = null;\n    }\n\n    /**\n     * Generate the resolution from the filename or fallback\n     * to the meta.scale field of the JSON data.\n     *\n     * @param resolutionFilename - The filename to use for resolving\n     *        the default resolution.\n     * @return Resolution to use for spritesheet.\n     */\n    private _updateResolution(resolutionFilename: string = null): number\n    {\n        const { scale } = this.data.meta;\n\n        // Use a defaultValue of `null` to check if a url-based resolution is set\n        let resolution = getResolutionOfUrl(resolutionFilename, null);\n\n        // No resolution found via URL\n        if (resolution === null)\n        {\n            // Use the scale value or default to 1\n            resolution = scale !== undefined ? parseFloat(scale) : 1;\n        }\n\n        // For non-1 resolutions, update baseTexture\n        if (resolution !== 1)\n        {\n            this.baseTexture.setResolution(resolution);\n        }\n\n        return resolution;\n    }\n\n    /**\n     * Parser spritesheet from loaded data. This is done asynchronously\n     * to prevent creating too many Texture within a single process.\n     *\n     * @param {Function} callback - Callback when complete returns\n     *        a map of the Textures for this spritesheet.\n     */\n    public parse(callback: (textures?: Dict<Texture>) => void): void\n    {\n        this._batchIndex = 0;\n        this._callback = callback;\n\n        if (this._frameKeys.length <= Spritesheet.BATCH_SIZE)\n        {\n            this._processFrames(0);\n            this._processAnimations();\n            this._parseComplete();\n        }\n        else\n        {\n            this._nextBatch();\n        }\n    }\n\n    /**\n     * Process a batch of frames\n     *\n     * @param initialFrameIndex - The index of frame to start.\n     */\n    private _processFrames(initialFrameIndex: number): void\n    {\n        let frameIndex = initialFrameIndex;\n        const maxFrames = Spritesheet.BATCH_SIZE;\n\n        while (frameIndex - initialFrameIndex < maxFrames && frameIndex < this._frameKeys.length)\n        {\n            const i = this._frameKeys[frameIndex];\n            const data = this._frames[i];\n            const rect = data.frame;\n\n            if (rect)\n            {\n                let frame = null;\n                let trim = null;\n                const sourceSize = data.trimmed !== false && data.sourceSize\n                    ? data.sourceSize : data.frame;\n\n                const orig = new Rectangle(\n                    0,\n                    0,\n                    Math.floor(sourceSize.w) / this.resolution,\n                    Math.floor(sourceSize.h) / this.resolution\n                );\n\n                if (data.rotated)\n                {\n                    frame = new Rectangle(\n                        Math.floor(rect.x) / this.resolution,\n                        Math.floor(rect.y) / this.resolution,\n                        Math.floor(rect.h) / this.resolution,\n                        Math.floor(rect.w) / this.resolution\n                    );\n                }\n                else\n                {\n                    frame = new Rectangle(\n                        Math.floor(rect.x) / this.resolution,\n                        Math.floor(rect.y) / this.resolution,\n                        Math.floor(rect.w) / this.resolution,\n                        Math.floor(rect.h) / this.resolution\n                    );\n                }\n\n                //  Check to see if the sprite is trimmed\n                if (data.trimmed !== false && data.spriteSourceSize)\n                {\n                    trim = new Rectangle(\n                        Math.floor(data.spriteSourceSize.x) / this.resolution,\n                        Math.floor(data.spriteSourceSize.y) / this.resolution,\n                        Math.floor(rect.w) / this.resolution,\n                        Math.floor(rect.h) / this.resolution\n                    );\n                }\n\n                this.textures[i] = new Texture(\n                    this.baseTexture,\n                    frame,\n                    orig,\n                    trim,\n                    data.rotated ? 2 : 0,\n                    data.anchor\n                );\n\n                // lets also add the frame to pixi's global cache for 'from' and 'fromLoader' functions\n                Texture.addToCache(this.textures[i], i);\n            }\n\n            frameIndex++;\n        }\n    }\n\n    /** Parse animations config. */\n    private _processAnimations(): void\n    {\n        const animations = this.data.animations || {};\n\n        for (const animName in animations)\n        {\n            this.animations[animName] = [];\n            for (let i = 0; i < animations[animName].length; i++)\n            {\n                const frameName = animations[animName][i];\n\n                this.animations[animName].push(this.textures[frameName]);\n            }\n        }\n    }\n\n    /** The parse has completed. */\n    private _parseComplete(): void\n    {\n        const callback = this._callback;\n\n        this._callback = null;\n        this._batchIndex = 0;\n        callback.call(this, this.textures);\n    }\n\n    /** Begin the next batch of textures. */\n    private _nextBatch(): void\n    {\n        this._processFrames(this._batchIndex * Spritesheet.BATCH_SIZE);\n        this._batchIndex++;\n        setTimeout(() =>\n        {\n            if (this._batchIndex * Spritesheet.BATCH_SIZE < this._frameKeys.length)\n            {\n                this._nextBatch();\n            }\n            else\n            {\n                this._processAnimations();\n                this._parseComplete();\n            }\n        }, 0);\n    }\n\n    /**\n     * Destroy Spritesheet and don't use after this.\n     *\n     * @param {boolean} [destroyBase=false] - Whether to destroy the base texture as well\n     */\n    public destroy(destroyBase = false): void\n    {\n        for (const i in this.textures)\n        {\n            this.textures[i].destroy();\n        }\n        this._frames = null;\n        this._frameKeys = null;\n        this.data = null;\n        this.textures = null;\n        if (destroyBase)\n        {\n            this._texture?.destroy();\n            this.baseTexture.destroy();\n        }\n        this._texture = null;\n        this.baseTexture = null;\n    }\n}\n\n/**\n * Reference to Spritesheet object created.\n * @member {PIXI.Spritesheet} spritesheet\n * @memberof PIXI.LoaderResource\n * @instance\n */\n\n/**\n * Dictionary of textures from Spritesheet.\n * @member {object<string, PIXI.Texture>} textures\n * @memberof PIXI.LoaderResource\n * @instance\n */\n","import { url } from '@pixi/utils';\nimport { Spritesheet } from './Spritesheet';\nimport { LoaderResource } from '@pixi/loaders';\nimport type { Loader } from '@pixi/loaders';\n\n/**\n * {@link PIXI.Loader} middleware for loading texture atlases that have been created with\n * TexturePacker or similar JSON-based spritesheet.\n *\n * This middleware automatically generates Texture resources.\n *\n * If you're using Webpack or other bundlers and plan on bundling the atlas' JSON,\n * use the {@link PIXI.Spritesheet} class to directly parse the JSON.\n *\n * The Loader's image Resource name is automatically appended with `\"_image\"`.\n * If a Resource with this name is already loaded, the Loader will skip parsing the\n * Spritesheet. The code below will generate an internal Loader Resource called `\"myatlas_image\"`.\n *\n * @example\n * loader.add('myatlas', 'path/to/myatlas.json');\n * loader.load(() => {\n *   loader.resources.myatlas; // atlas JSON resource\n *   loader.resources.myatlas_image; // atlas Image resource\n * });\n *\n * @memberof PIXI\n */\nexport class SpritesheetLoader\n{\n    /**\n     * Called after a resource is loaded.\n     *\n     * @see PIXI.Loader.loaderMiddleware\n     * @param resource\n     * @param next\n     */\n    static use(resource: LoaderResource, next: (...args: unknown[]) => void): void\n    {\n        // because this is middleware, it execute in loader context. `this` = loader\n        const loader = (this as any) as Loader;\n        const imageResourceName = `${resource.name}_image`;\n\n        // skip if no data, its not json, it isn't spritesheet data, or the image resource already exists\n        if (!resource.data\n            || resource.type !== LoaderResource.TYPE.JSON\n            || !resource.data.frames\n            || loader.resources[imageResourceName]\n        )\n        {\n            next();\n\n            return;\n        }\n\n        // Check and add the multi atlas\n        // Heavily influenced and based on https://github.com/rocket-ua/pixi-tps-loader/blob/master/src/ResourceLoader.js\n        // eslint-disable-next-line camelcase\n        const multiPacks = resource.data?.meta?.related_multi_packs;\n\n        if (Array.isArray(multiPacks))\n        {\n            for (const item of multiPacks)\n            {\n                if (typeof item !== 'string')\n                {\n                    continue;\n                }\n\n                const itemName = item.replace('.json', '');\n                const itemUrl = url.resolve(resource.url.replace(loader.baseUrl, ''), item);\n\n                // Check if the file wasn't already added as multipacks are redundant\n                if (loader.resources[itemName]\n                    || Object.values(loader.resources).some((r) => url.format(url.parse(r.url)) === itemUrl))\n                {\n                    continue;\n                }\n\n                const options = {\n                    crossOrigin: resource.crossOrigin,\n                    loadType: LoaderResource.LOAD_TYPE.XHR,\n                    xhrType: LoaderResource.XHR_RESPONSE_TYPE.JSON,\n                    parentResource: resource,\n                    metadata: resource.metadata\n                };\n\n                loader.add(itemName, itemUrl, options);\n            }\n        }\n\n        const loadOptions = {\n            crossOrigin: resource.crossOrigin,\n            metadata: resource.metadata.imageMetadata,\n            parentResource: resource,\n        };\n\n        const resourcePath = SpritesheetLoader.getResourcePath(resource, loader.baseUrl);\n\n        // load the image for this sheet\n        loader.add(imageResourceName, resourcePath, loadOptions, function onImageLoad(res: LoaderResource)\n        {\n            if (res.error)\n            {\n                next(res.error);\n\n                return;\n            }\n\n            const spritesheet = new Spritesheet(\n                res.texture,\n                resource.data,\n                resource.url\n            );\n\n            spritesheet.parse(() =>\n            {\n                resource.spritesheet = spritesheet;\n                resource.textures = spritesheet.textures;\n                next();\n            });\n        });\n    }\n\n    /**\n     * Get the spritesheets root path\n     *\n     * @param resource - Resource to check path\n     * @param baseUrl - Base root url\n     */\n    static getResourcePath(resource: LoaderResource, baseUrl: string): string\n    {\n        // Prepend url path unless the resource image is a data url\n        if (resource.isDataUrl)\n        {\n            return resource.data.meta.image;\n        }\n\n        return url.resolve(resource.url.replace(baseUrl, ''), resource.data.meta.image);\n    }\n}\n"],"names":["Spritesheet","texture","data","resolutionFilename","this","_texture","Texture","baseTexture","BaseTexture","textures","animations","resource","resolution","_updateResolution","url","_frames","frames","_frameKeys","Object","keys","_batchIndex","_callback","prototype","scale","meta","getResolutionOfUrl","undefined","parseFloat","setResolution","parse","callback","length","BATCH_SIZE","_processFrames","_processAnimations","_parseComplete","_nextBatch","initialFrameIndex","frameIndex","maxFrames","i","rect","frame","trim","sourceSize","trimmed","orig","Rectangle","Math","floor","w","h","rotated","x","y","spriteSourceSize","anchor","addToCache","animName","frameName","push","call","_this","setTimeout","destroy","destroyBase","_a","SpritesheetLoader","use","next","loader","imageResourceName","name","type","LoaderResource","TYPE","JSON","resources","multiPacks","_b","related_multi_packs","Array","isArray","item","itemName","replace","itemUrl","resolve","baseUrl","values","some","r","format","options","crossOrigin","loadType","LOAD_TYPE","XHR","xhrType","XHR_RESPONSE_TYPE","parentResource","metadata","add","multiPacks_1","_i","loadOptions","imageMetadata","resourcePath","getResourcePath","res","error","spritesheet","isDataUrl","image"],"mappings":";;;;;;;sMAgEA,IAAAA,EAAA,WAkEI,SAAAA,EAAYC,EAAgCC,EAAwBC,QAAA,IAAAA,IAAAA,EAAiC,MAEjGC,KAAKC,SAAWJ,aAAmBK,EAAUL,EAAU,KACvDG,KAAKG,YAAcN,aAAmBO,EAAcP,EAAUG,KAAKC,SAASE,YAC5EH,KAAKK,SAAW,GAChBL,KAAKM,WAAa,GAClBN,KAAKF,KAAOA,EAEZ,IAAMS,EAAWP,KAAKG,YAAYI,SAElCP,KAAKQ,WAAaR,KAAKS,kBAAkBV,IAAuBQ,EAAWA,EAASG,IAAM,OAC1FV,KAAKW,QAAUX,KAAKF,KAAKc,OACzBZ,KAAKa,WAAaC,OAAOC,KAAKf,KAAKW,SACnCX,KAAKgB,YAAc,EACnBhB,KAAKiB,UAAY,KA4MzB,OAjMYrB,EAAiBsB,UAAAT,kBAAzB,SAA0BV,QAAA,IAAAA,IAAAA,EAAiC,MAE/C,IAAAoB,EAAUnB,KAAKF,KAAKsB,WAGxBZ,EAAaa,EAAmBtB,EAAoB,MAexD,OAZmB,OAAfS,IAGAA,OAAuBc,IAAVH,EAAsBI,WAAWJ,GAAS,GAIxC,IAAfX,GAEAR,KAAKG,YAAYqB,cAAchB,GAG5BA,GAUJZ,EAAKsB,UAAAO,MAAZ,SAAaC,GAET1B,KAAKgB,YAAc,EACnBhB,KAAKiB,UAAYS,EAEb1B,KAAKa,WAAWc,QAAU/B,EAAYgC,YAEtC5B,KAAK6B,eAAe,GACpB7B,KAAK8B,qBACL9B,KAAK+B,kBAIL/B,KAAKgC,cASLpC,EAAcsB,UAAAW,eAAtB,SAAuBI,GAKnB,IAHA,IAAIC,EAAaD,EACXE,EAAYvC,EAAYgC,WAEvBM,EAAaD,EAAoBE,GAAaD,EAAalC,KAAKa,WAAWc,QAClF,CACI,IAAMS,EAAIpC,KAAKa,WAAWqB,GACpBpC,EAAOE,KAAKW,QAAQyB,GACpBC,EAAOvC,EAAKwC,MAElB,GAAID,EACJ,CACI,IAAIC,EAAQ,KACRC,EAAO,KACLC,GAA8B,IAAjB1C,EAAK2C,SAAqB3C,EAAK0C,WAC5C1C,EAAK0C,WAAa1C,EAAKwC,MAEvBI,EAAO,IAAIC,EACb,EACA,EACAC,KAAKC,MAAML,EAAWM,GAAK9C,KAAKQ,WAChCoC,KAAKC,MAAML,EAAWO,GAAK/C,KAAKQ,YAKhC8B,EAFAxC,EAAKkD,QAEG,IAAIL,EACRC,KAAKC,MAAMR,EAAKY,GAAKjD,KAAKQ,WAC1BoC,KAAKC,MAAMR,EAAKa,GAAKlD,KAAKQ,WAC1BoC,KAAKC,MAAMR,EAAKU,GAAK/C,KAAKQ,WAC1BoC,KAAKC,MAAMR,EAAKS,GAAK9C,KAAKQ,YAKtB,IAAImC,EACRC,KAAKC,MAAMR,EAAKY,GAAKjD,KAAKQ,WAC1BoC,KAAKC,MAAMR,EAAKa,GAAKlD,KAAKQ,WAC1BoC,KAAKC,MAAMR,EAAKS,GAAK9C,KAAKQ,WAC1BoC,KAAKC,MAAMR,EAAKU,GAAK/C,KAAKQ,aAKb,IAAjBV,EAAK2C,SAAqB3C,EAAKqD,mBAE/BZ,EAAO,IAAII,EACPC,KAAKC,MAAM/C,EAAKqD,iBAAiBF,GAAKjD,KAAKQ,WAC3CoC,KAAKC,MAAM/C,EAAKqD,iBAAiBD,GAAKlD,KAAKQ,WAC3CoC,KAAKC,MAAMR,EAAKS,GAAK9C,KAAKQ,WAC1BoC,KAAKC,MAAMR,EAAKU,GAAK/C,KAAKQ,aAIlCR,KAAKK,SAAS+B,GAAK,IAAIlC,EACnBF,KAAKG,YACLmC,EACAI,EACAH,EACAzC,EAAKkD,QAAU,EAAI,EACnBlD,EAAKsD,QAITlD,EAAQmD,WAAWrD,KAAKK,SAAS+B,GAAIA,GAGzCF,MAKAtC,EAAAsB,UAAAY,mBAAR,WAEI,IAAMxB,EAAaN,KAAKF,KAAKQ,YAAc,GAE3C,IAAK,IAAMgD,KAAYhD,EACvB,CACIN,KAAKM,WAAWgD,GAAY,GAC5B,IAAK,IAAIlB,EAAI,EAAGA,EAAI9B,EAAWgD,GAAU3B,OAAQS,IACjD,CACI,IAAMmB,EAAYjD,EAAWgD,GAAUlB,GAEvCpC,KAAKM,WAAWgD,GAAUE,KAAKxD,KAAKK,SAASkD,OAMjD3D,EAAAsB,UAAAa,eAAR,WAEI,IAAML,EAAW1B,KAAKiB,UAEtBjB,KAAKiB,UAAY,KACjBjB,KAAKgB,YAAc,EACnBU,EAAS+B,KAAKzD,KAAMA,KAAKK,WAIrBT,EAAAsB,UAAAc,WAAR,WAAA,IAgBC0B,EAAA1D,KAdGA,KAAK6B,eAAe7B,KAAKgB,YAAcpB,EAAYgC,YACnD5B,KAAKgB,cACL2C,YAAW,WAEHD,EAAK1C,YAAcpB,EAAYgC,WAAa8B,EAAK7C,WAAWc,OAE5D+B,EAAK1B,cAIL0B,EAAK5B,qBACL4B,EAAK3B,oBAEV,IAQAnC,EAAOsB,UAAA0C,QAAd,SAAeC,SAEX,IAAK,IAAMzB,UAFA,IAAAyB,IAAAA,GAAmB,GAEd7D,KAAKK,SAEjBL,KAAKK,SAAS+B,GAAGwB,UAErB5D,KAAKW,QAAU,KACfX,KAAKa,WAAa,KAClBb,KAAKF,KAAO,KACZE,KAAKK,SAAW,KACZwD,IAEa,QAAbC,EAAA9D,KAAKC,gBAAQ,IAAA6D,GAAAA,EAAEF,UACf5D,KAAKG,YAAYyD,WAErB5D,KAAKC,SAAW,KAChBD,KAAKG,YAAc,MAvRPP,EAAUgC,WAAG,IAyRhChC,KCjUDmE,EAAA,WAAA,SAAAA,KAgHA,OAvGWA,EAAAC,IAAP,SAAWzD,EAA0B0D,WAG3BC,EAAUlE,KACVmE,EAAuB5D,EAAS6D,cAGtC,GAAK7D,EAAST,MACPS,EAAS8D,OAASC,EAAeC,KAAKC,MACrCjE,EAAST,KAAKc,SACfsD,EAAOO,UAAUN,GAHxB,CAcA,IAAMO,EAAkC,UAAN,UAAfnE,EAAST,YAAM,IAAAgE,OAAA,EAAAA,EAAA1C,YAAM,IAAAuD,OAAA,EAAAA,EAAAC,oBAExC,GAAIC,MAAMC,QAAQJ,GAEd,mBAAWK,GAEP,GAAoB,iBAATA,mBAKX,IAAMC,EAAWD,EAAKE,QAAQ,QAAS,IACjCC,EAAUxE,EAAIyE,QAAQ5E,EAASG,IAAIuE,QAAQf,EAAOkB,QAAS,IAAKL,GAGtE,GAAIb,EAAOO,UAAUO,IACdlE,OAAOuE,OAAOnB,EAAOO,WAAWa,MAAK,SAACC,GAAM,OAAA7E,EAAI8E,OAAO9E,EAAIe,MAAM8D,EAAE7E,QAAUwE,sBAKpF,IAAMO,EAAU,CACZC,YAAanF,EAASmF,YACtBC,SAAUrB,EAAesB,UAAUC,IACnCC,QAASxB,EAAeyB,kBAAkBvB,KAC1CwB,eAAgBzF,EAChB0F,SAAU1F,EAAS0F,UAGvB/B,EAAOgC,IAAIlB,EAAUE,EAASO,QAzBfU,EAAAzB,EAAA0B,EAAAD,EAAAxE,OAAAyE,IAAU,GAAdD,EAAAC,IA6BnB,IAAMC,EAAc,CAChBX,YAAanF,EAASmF,YACtBO,SAAU1F,EAAS0F,SAASK,cAC5BN,eAAgBzF,GAGdgG,EAAexC,EAAkByC,gBAAgBjG,EAAU2D,EAAOkB,SAGxElB,EAAOgC,IAAI/B,EAAmBoC,EAAcF,GAAa,SAAqBI,GAE1E,GAAIA,EAAIC,MAEJzC,EAAKwC,EAAIC,WAFb,CAOA,IAAMC,EAAc,IAAI/G,EACpB6G,EAAI5G,QACJU,EAAST,KACTS,EAASG,KAGbiG,EAAYlF,OAAM,WAEdlB,EAASoG,YAAcA,EACvBpG,EAASF,SAAWsG,EAAYtG,SAChC4D,gBArEJA,KAgFDF,EAAAyC,gBAAP,SAAuBjG,EAA0B6E,GAG7C,OAAI7E,EAASqG,UAEFrG,EAAST,KAAKsB,KAAKyF,MAGvBnG,EAAIyE,QAAQ5E,EAASG,IAAIuE,QAAQG,EAAS,IAAK7E,EAAST,KAAKsB,KAAKyF,QAEhF9C"}