{"version":3,"file":"compressed-textures.js","sources":["../../src/const.ts","../../../../node_modules/tslib/tslib.es6.js","../../src/resources/BlobResource.ts","../../src/resources/CompressedTextureResource.ts","../../src/loaders/CompressedTextureLoader.ts","../../src/loaders/registerCompressedTextures.ts","../../src/loaders/DDSLoader.ts","../../src/loaders/KTXLoader.ts"],"sourcesContent":["/**\n * WebGL internal formats, including compressed texture formats provided by extensions\n *\n * @memberof PIXI\n * @static\n * @name INTERNAL_FORMATS\n * @enum {number}\n * @property {number} COMPRESSED_RGB_S3TC_DXT1_EXT=0x83F0\n * @property {number} COMPRESSED_RGBA_S3TC_DXT1_EXT=0x83F1\n * @property {number} COMPRESSED_RGBA_S3TC_DXT3_EXT=0x83F2\n * @property {number} COMPRESSED_RGBA_S3TC_DXT5_EXT=0x83F3\n * @property {number} COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT=35917\n * @property {number} COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT=35918\n * @property {number} COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT=35919\n * @property {number} COMPRESSED_SRGB_S3TC_DXT1_EXT=35916\n * @property {number} COMPRESSED_R11_EAC=0x9270\n * @property {number} COMPRESSED_SIGNED_R11_EAC=0x9271\n * @property {number} COMPRESSED_RG11_EAC=0x9272\n * @property {number} COMPRESSED_SIGNED_RG11_EAC=0x9273\n * @property {number} COMPRESSED_RGB8_ETC2=0x9274\n * @property {number} COMPRESSED_RGBA8_ETC2_EAC=0x9278\n * @property {number} COMPRESSED_SRGB8_ETC2=0x9275\n * @property {number} COMPRESSED_SRGB8_ALPHA8_ETC2_EAC=0x9279\n * @property {number} COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2=0x9276\n * @property {number} COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2=0x9277\n * @property {number} COMPRESSED_RGB_PVRTC_4BPPV1_IMG=0x8C00\n * @property {number} COMPRESSED_RGBA_PVRTC_4BPPV1_IMG=0x8C02\n * @property {number} COMPRESSED_RGB_PVRTC_2BPPV1_IMG=0x8C01\n * @property {number} COMPRESSED_RGBA_PVRTC_2BPPV1_IMG=0x8C03\n * @property {number} COMPRESSED_RGB_ETC1_WEBGL=0x8D64\n * @property {number} COMPRESSED_RGB_ATC_WEBGL=0x8C92\n * @property {number} COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL=0x8C92\n * @property {number} COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL=0x87EE\n */\nexport enum INTERNAL_FORMATS {\n    // WEBGL_compressed_texture_s3tc\n    COMPRESSED_RGB_S3TC_DXT1_EXT = 0x83F0,\n    COMPRESSED_RGBA_S3TC_DXT1_EXT = 0x83F1,\n    COMPRESSED_RGBA_S3TC_DXT3_EXT = 0x83F2,\n    COMPRESSED_RGBA_S3TC_DXT5_EXT = 0x83F3,\n\n    // WEBGL_compressed_texture_s3tc_srgb\n    COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT = 35917,\n    COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT = 35918,\n    COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT = 35919,\n    COMPRESSED_SRGB_S3TC_DXT1_EXT = 35916,\n\n    // WEBGL_compressed_texture_etc\n    COMPRESSED_R11_EAC = 0x9270,\n    COMPRESSED_SIGNED_R11_EAC = 0x9271,\n    COMPRESSED_RG11_EAC = 0x9272,\n    COMPRESSED_SIGNED_RG11_EAC = 0x9273,\n    COMPRESSED_RGB8_ETC2 = 0x9274,\n    COMPRESSED_RGBA8_ETC2_EAC = 0x9278,\n    COMPRESSED_SRGB8_ETC2 = 0x9275,\n    COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = 0x9279,\n    COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9276,\n    COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9277,\n\n    // WEBGL_compressed_texture_pvrtc\n    COMPRESSED_RGB_PVRTC_4BPPV1_IMG = 0x8C00,\n    COMPRESSED_RGBA_PVRTC_4BPPV1_IMG = 0x8C02,\n    COMPRESSED_RGB_PVRTC_2BPPV1_IMG = 0x8C01,\n    COMPRESSED_RGBA_PVRTC_2BPPV1_IMG = 0x8C03,\n\n    // WEBGL_compressed_texture_etc1\n    COMPRESSED_RGB_ETC1_WEBGL = 0x8D64,\n\n    // WEBGL_compressed_texture_atc\n    COMPRESSED_RGB_ATC_WEBGL = 0x8C92,\n    COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL = 0x8C92, // TODO: Probably a bug on the MDN site\n    COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL = 0x87EE,\n}\n\n/**\n * Maps the compressed texture formats in {@link PIXI.INTERNAL_FORMATS} to the number of bytes taken by\n * each texel.\n *\n * @memberof PIXI\n * @static\n * @ignore\n */\nexport const INTERNAL_FORMAT_TO_BYTES_PER_PIXEL: { [id: number]: number } = {\n    // WEBGL_compressed_texture_s3tc\n    [INTERNAL_FORMATS.COMPRESSED_RGB_S3TC_DXT1_EXT]: 0.5,\n    [INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT1_EXT]: 0.5,\n    [INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT3_EXT]: 1,\n    [INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT5_EXT]: 1,\n\n    // WEBGL_compressed_texture_s3tc\n    [INTERNAL_FORMATS.COMPRESSED_SRGB_S3TC_DXT1_EXT]: 0.5,\n    [INTERNAL_FORMATS.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT]: 0.5,\n    [INTERNAL_FORMATS.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT]: 1,\n    [INTERNAL_FORMATS.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT]: 1,\n\n    // WEBGL_compressed_texture_etc\n    [INTERNAL_FORMATS.COMPRESSED_R11_EAC]: 0.5,\n    [INTERNAL_FORMATS.COMPRESSED_SIGNED_R11_EAC]: 0.5,\n    [INTERNAL_FORMATS.COMPRESSED_RG11_EAC]: 1,\n    [INTERNAL_FORMATS.COMPRESSED_SIGNED_RG11_EAC]: 1,\n    [INTERNAL_FORMATS.COMPRESSED_RGB8_ETC2]: 0.5,\n    [INTERNAL_FORMATS.COMPRESSED_RGBA8_ETC2_EAC]: 1,\n    [INTERNAL_FORMATS.COMPRESSED_SRGB8_ETC2]: 0.5,\n    [INTERNAL_FORMATS.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC]: 1,\n    [INTERNAL_FORMATS.COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2]: 0.5, // ~~\n    [INTERNAL_FORMATS.COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2]: 0.5, // ~~\n\n    // WEBGL_compressed_texture_pvrtc\n    [INTERNAL_FORMATS.COMPRESSED_RGB_PVRTC_4BPPV1_IMG]: 0.5,\n    [INTERNAL_FORMATS.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG]: 0.5,\n    [INTERNAL_FORMATS.COMPRESSED_RGB_PVRTC_2BPPV1_IMG]: 0.25,\n    [INTERNAL_FORMATS.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG]: 0.25,\n\n    // WEBGL_compressed_texture_etc1\n    [INTERNAL_FORMATS.COMPRESSED_RGB_ETC1_WEBGL]: 0.5,\n\n    // @see https://www.khronos.org/registry/OpenGL/extensions/AMD/AMD_compressed_ATC_texture.txt\n    // WEBGL_compressed_texture_atc\n    [INTERNAL_FORMATS.COMPRESSED_RGB_ATC_WEBGL]: 0.5,\n    [INTERNAL_FORMATS.COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL]: 1,\n    [INTERNAL_FORMATS.COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL]: 1\n};\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Resource, ViewableBuffer, BufferResource } from '@pixi/core';\n\ninterface IBlobOptions\n{\n    autoLoad?: boolean;\n    width: number;\n    height: number;\n}\n\n/**\n * Resource that fetches texture data over the network and stores it in a buffer.\n *\n * @class\n * @extends PIXI.Resource\n * @memberof PIXI\n */\nexport abstract class BlobResource extends BufferResource\n{\n    protected origin: string;\n    protected buffer: ViewableBuffer;\n    protected loaded: boolean;\n\n    /**\n     * @param {string} url - the URL of the texture file\n     * @param {boolean}[autoLoad] - whether to fetch the data immediately;\n     *  you can fetch it later via {@link BlobResource#load}\n     */\n    constructor(source: string | Uint8Array | Uint32Array | Float32Array,\n        options: IBlobOptions = { width: 1, height: 1, autoLoad: true })\n    {\n        let origin: string;\n        let data: Uint8Array | Uint32Array | Float32Array;\n\n        if (typeof source === 'string')\n        {\n            origin = source;\n            data = new Uint8Array();\n        }\n        else\n        {\n            origin = null;\n            data = source;\n        }\n\n        super(data, options);\n\n        /**\n         * The URL of the texture file\n         * @member {string}\n         */\n        this.origin = origin;\n\n        /**\n         * The viewable buffer on the data\n         * @member {ViewableBuffer}\n         */\n        // HINT: BlobResource allows \"null\" sources, assuming the child class provides an alternative\n        this.buffer = data ? new ViewableBuffer(data) : null;\n\n        // Allow autoLoad = \"undefined\" still load the resource by default\n        if (this.origin && options.autoLoad !== false)\n        {\n            this.load();\n        }\n        if (data && data.length)\n        {\n            this.loaded = true;\n            this.onBlobLoaded(this.buffer.rawBinaryData);\n        }\n    }\n\n    protected onBlobLoaded(_data: ArrayBuffer): void\n    {\n        // TODO: Override this method\n    }\n\n    /**\n     * Loads the blob\n     */\n    async load(): Promise<Resource>\n    {\n        const response = await fetch(this.origin);\n        const blob = await response.blob();\n        const arrayBuffer = await blob.arrayBuffer();\n\n        this.data = new Uint32Array(arrayBuffer);\n        this.buffer = new ViewableBuffer(arrayBuffer);\n        this.loaded = true;\n\n        this.onBlobLoaded(arrayBuffer);\n        this.update();\n\n        return this;\n    }\n}\n","import { BlobResource } from './BlobResource';\nimport { INTERNAL_FORMAT_TO_BYTES_PER_PIXEL } from '../const';\nimport { Renderer, BaseTexture, GLTexture } from '@pixi/core';\n\nimport type { INTERNAL_FORMATS } from '../const';\n\n/**\n * @ignore\n */\n// Used in PIXI.KTXLoader\nexport type CompressedLevelBuffer = {\n    levelID: number,\n    levelWidth: number,\n    levelHeight: number,\n    levelBuffer: Uint8Array\n};\n\n/**\n * @ignore\n */\nexport interface ICompressedTextureResourceOptions\n{\n    format: INTERNAL_FORMATS;\n    width: number;\n    height: number;\n    levels?: number;\n    levelBuffers?: CompressedLevelBuffer[];\n}\n\n/**\n * Resource for compressed texture formats, as follows: S3TC/DXTn (& their sRGB formats), ATC, ASTC, ETC 1/2, PVRTC.\n *\n * Compressed textures improve performance when rendering is texture-bound. The texture data stays compressed in\n * graphics memory, increasing memory locality and speeding up texture fetches. These formats can also be used to store\n * more detail in the same amount of memory.\n *\n * For most developers, container file formats are a better abstraction instead of directly handling raw texture\n * data. PixiJS provides native support for the following texture file formats (via {@link PIXI.Loader}):\n *\n * * **.dds** - the DirectDraw Surface file format stores DXTn (DXT-1,3,5) data. See {@link PIXI.DDSLoader}\n * * **.ktx** - the Khronos Texture Container file format supports storing all the supported WebGL compression formats.\n *  See {@link PIXI.KTXLoader}.\n * * **.basis** - the BASIS supercompressed file format stores texture data in an internal format that is transcoded\n *  to the compression format supported on the device at _runtime_. It also supports transcoding into a uncompressed\n *  format as a fallback; you must install the `@pixi/basis-loader`, `@pixi/basis-transcoder` packages separately to\n *  use these files. See {@link PIXI.BasisLoader}.\n *\n * The loaders for the aforementioned formats use `CompressedTextureResource` internally. It is strongly suggested that\n * they be used instead.\n *\n * ## Working directly with CompressedTextureResource\n *\n * Since `CompressedTextureResource` inherits `BlobResource`, you can provide it a URL pointing to a file containing\n * the raw texture data (with no file headers!):\n *\n * ```js\n * // The resource backing the texture data for your textures.\n * // NOTE: You can also provide a ArrayBufferView instead of a URL. This is used when loading data from a container file\n * //   format such as KTX, DDS, or BASIS.\n * const compressedResource = new PIXI.CompressedTextureResource(\"bunny.dxt5\", {\n *   format: PIXI.INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT5_EXT,\n *   width: 256,\n *   height: 256\n * });\n *\n * // You can create a base-texture to the cache, so that future `Texture`s can be created using the `Texture.from` API.\n * const baseTexture = new PIXI.BaseTexture(compressedResource, { pmaMode: PIXI.ALPHA_MODES.NPM });\n *\n * // Create a Texture to add to the TextureCache\n * const texture = new PIXI.Texture(baseTexture);\n *\n * // Add baseTexture & texture to the global texture cache\n * PIXI.BaseTexture.addToCache(baseTexture, \"bunny.dxt5\");\n * PIXI.Texture.addToCache(texture, \"bunny.dxt5\");\n * ```\n *\n * @memberof PIXI\n */\nexport class CompressedTextureResource extends BlobResource\n{\n    /** The compression format */\n    public format: INTERNAL_FORMATS;\n    /**\n     * The number of mipmap levels stored in the resource buffer.\n     * @default 1\n     */\n    public levels: number;\n\n    // Easy access to the WebGL extension providing support for the compression format via ContextSystem\n    private _extension: 's3tc' | 's3tc_sRGB' | 'atc' | 'astc' | 'etc' | 'etc1' | 'pvrtc';\n    // Buffer views for each mipmap level in the main buffer\n    private _levelBuffers: CompressedLevelBuffer[];\n\n    /**\n     * @param source - the buffer/URL holding the compressed texture data\n     * @param options\n     * @param {PIXI.INTERNAL_FORMATS} options.format - the compression format\n     * @param {number} options.width - the image width in pixels.\n     * @param {number} options.height - the image height in pixels.\n     * @param {number} [options.level=1] - the mipmap levels stored in the compressed texture, including level 0.\n     * @param {number} [options.levelBuffers] - the buffers for each mipmap level. `CompressedTextureResource` can allows you\n     *      to pass `null` for `source`, for cases where each level is stored in non-contiguous memory.\n     */\n    constructor(source: string | Uint8Array | Uint32Array, options: ICompressedTextureResourceOptions)\n    {\n        super(source, options);\n\n        this.format = options.format;\n        this.levels = options.levels || 1;\n\n        this._width = options.width;\n        this._height = options.height;\n\n        this._extension = CompressedTextureResource._formatToExtension(this.format);\n\n        if (options.levelBuffers || this.buffer)\n        {\n            // ViewableBuffer doesn't support byteOffset :-( so allow source to be Uint8Array\n            this._levelBuffers = options.levelBuffers\n                || CompressedTextureResource._createLevelBuffers(\n                    source instanceof Uint8Array ? source : this.buffer.uint8View,\n                    this.format,\n                    this.levels,\n                    4, 4, // PVRTC has 8x4 blocks in 2bpp mode\n                    this.width,\n                    this.height);\n        }\n    }\n\n    /**\n     * @override\n     * @param renderer - A reference to the current renderer\n     * @param _texture - the texture\n     * @param _glTexture - texture instance for this webgl context\n     */\n    upload(renderer: Renderer, _texture: BaseTexture, _glTexture: GLTexture): boolean\n    {\n        const gl = renderer.gl;\n        const extension = renderer.context.extensions[this._extension];\n\n        if (!extension)\n        {\n            throw new Error(`${this._extension} textures are not supported on the current machine`);\n        }\n        if (!this._levelBuffers)\n        {\n            // Do not try to upload data before BlobResource loads, unless the levelBuffers were provided directly!\n            return false;\n        }\n\n        for (let i = 0, j = this.levels; i < j; i++)\n        {\n            const { levelID, levelWidth, levelHeight, levelBuffer } = this._levelBuffers[i];\n\n            gl.compressedTexImage2D(gl.TEXTURE_2D, levelID, this.format, levelWidth, levelHeight, 0, levelBuffer);\n        }\n\n        return true;\n    }\n\n    /** @protected */\n    protected onBlobLoaded(): void\n    {\n        this._levelBuffers = CompressedTextureResource._createLevelBuffers(\n            this.buffer.uint8View,\n            this.format,\n            this.levels,\n            4, 4, // PVRTC has 8x4 blocks in 2bpp mode\n            this.width,\n            this.height);\n    }\n\n    /**\n     * Returns the key (to ContextSystem#extensions) for the WebGL extension supporting the compression format\n     *\n     * @private\n     * @param format - the compression format to get the extension for.\n     */\n    private static _formatToExtension(format: INTERNAL_FORMATS):\n        's3tc' | 's3tc_sRGB' | 'atc' |\n        'astc' | 'etc' | 'etc1' | 'pvrtc'\n    {\n        if (format >= 0x83F0 && format <= 0x83F3)\n        {\n            return 's3tc';\n        }\n        else if (format >= 0x9270 && format <= 0x9279)\n        {\n            return 'etc';\n        }\n        else if (format >= 0x8C00 && format <= 0x8C03)\n        {\n            return 'pvrtc';\n        }\n        else if (format >= 0x8D64)\n        {\n            return 'etc1';\n        }\n        else if (format >= 0x8C92 && format <= 0x87EE)\n        {\n            return 'atc';\n        }\n\n        throw new Error('Invalid (compressed) texture format given!');\n    }\n\n    /**\n     * Pre-creates buffer views for each mipmap level\n     *\n     * @private\n     * @param buffer -\n     * @param format - compression formats\n     * @param levels - mipmap levels\n     * @param blockWidth -\n     * @param blockHeight -\n     * @param imageWidth - width of the image in pixels\n     * @param imageHeight - height of the image in pixels\n     */\n    private static _createLevelBuffers(\n        buffer: Uint8Array,\n        format: INTERNAL_FORMATS,\n        levels: number,\n        blockWidth: number,\n        blockHeight: number,\n        imageWidth: number,\n        imageHeight: number\n    ): CompressedLevelBuffer[]\n    {\n        // The byte-size of the first level buffer\n        const buffers = new Array<CompressedLevelBuffer>(levels);\n\n        let offset = buffer.byteOffset;\n\n        let levelWidth = imageWidth;\n        let levelHeight = imageHeight;\n        let alignedLevelWidth = (levelWidth + blockWidth - 1) & ~(blockWidth - 1);\n        let alignedLevelHeight = (levelHeight + blockHeight - 1) & ~(blockHeight - 1);\n\n        let levelSize = alignedLevelWidth * alignedLevelHeight * INTERNAL_FORMAT_TO_BYTES_PER_PIXEL[format];\n\n        for (let i = 0; i < levels; i++)\n        {\n            buffers[i] = {\n                levelID: i,\n                levelWidth: levels > 1 ? levelWidth : alignedLevelWidth,\n                levelHeight: levels > 1 ? levelHeight : alignedLevelHeight,\n                levelBuffer: new Uint8Array(buffer.buffer, offset, levelSize)\n            };\n\n            offset += levelSize;\n\n            // Calculate levelBuffer dimensions for next iteration\n            levelWidth = (levelWidth >> 1) || 1;\n            levelHeight = (levelHeight >> 1) || 1;\n            alignedLevelWidth = (levelWidth + blockWidth - 1) & ~(blockWidth - 1);\n            alignedLevelHeight = (levelHeight + blockHeight - 1) & ~(blockHeight - 1);\n            levelSize = alignedLevelWidth * alignedLevelHeight * INTERNAL_FORMAT_TO_BYTES_PER_PIXEL[format];\n        }\n\n        return buffers;\n    }\n}\n","import { LoaderResource } from '@pixi/loaders';\nimport { url } from '@pixi/utils';\n\nimport type { Loader } from '@pixi/loaders';\nimport type { INTERNAL_FORMATS } from '../const';\n\n/**\n * Schema for compressed-texture manifests\n *\n * @ignore\n * @see PIXI.CompressedTextureLoader\n */\nexport type CompressedTextureManifest = {\n    textures: Array<{ src: string, format?: keyof INTERNAL_FORMATS}>,\n    cacheID: string;\n};\n\n// Missing typings? - https://github.com/microsoft/TypeScript/issues/39655\n/**\n * Compressed texture extensions\n */\n/* eslint-disable camelcase */\nexport type CompressedTextureExtensions = {\n    s3tc?: WEBGL_compressed_texture_s3tc,\n    s3tc_sRGB: WEBGL_compressed_texture_s3tc_srgb,\n    etc: any,\n    etc1: any,\n    pvrtc: any,\n    atc: any,\n    astc: WEBGL_compressed_texture_astc\n};\nexport type CompressedTextureExtensionRef = keyof CompressedTextureExtensions;\n/* eslint-enable camelcase */\n\n/**\n * Loader plugin for handling compressed textures for all platforms.\n *\n * @class\n * @memberof PIXI\n * @implements PIXI.ILoaderPlugin\n */\nexport class CompressedTextureLoader\n{\n    /**  Map of available texture extensions. */\n    private static _textureExtensions: Partial<CompressedTextureExtensions>;\n\n    /** Map of available texture formats. */\n    private static _textureFormats: { [P in keyof INTERNAL_FORMATS]?: number };\n\n    /**\n     * Called after a compressed-textures manifest is loaded.\n     *\n     * This will then load the correct compression format for the device. Your manifest should adhere\n     * to the following schema:\n     *\n     * ```js\n     * import { INTERNAL_FORMATS } from '@pixi/constants';\n     *\n     * type CompressedTextureManifest = {\n     *  textures: Array<{ src: string, format?: keyof INTERNAL_FORMATS}>,\n     *  cacheID: string;\n     * };\n     * ```\n     *\n     * This is an example of a .json manifest file\n     *\n     * ```json\n     * {\n     *   \"cacheID\":\"asset\",\n     *   \"textures\":[\n     *     { \"src\":\"asset.fallback.png\" },\n     *     { \"format\":\"COMPRESSED_RGBA_S3TC_DXT5_EXT\", \"src\":\"asset.s3tc.ktx\" },\n     *     { \"format\":\"COMPRESSED_RGBA8_ETC2_EAC\", \"src\":\"asset.etc.ktx\" },\n     *     { \"format\":\"RGBA_PVRTC_4BPPV1_IMG\", \"src\":\"asset.pvrtc.ktx\" }\n     *   ]\n     * }\n     * ```\n     */\n    static use(resource: LoaderResource, next: (...args: any[]) => void): void\n    {\n        const data: CompressedTextureManifest = resource.data;\n        const loader = this as unknown as Loader;\n\n        if (resource.type === LoaderResource.TYPE.JSON\n            && data\n            && data.cacheID\n            && data.textures)\n        {\n            const textures = data.textures;\n\n            let textureURL: string;\n            let fallbackURL: string;\n\n            // Search for an extension that holds one the formats\n            for (let i = 0, j = textures.length; i < j; i++)\n            {\n                const texture = textures[i];\n                const url = texture.src;\n                const format = texture.format;\n\n                if (!format)\n                {\n                    fallbackURL = url;\n                }\n                if (CompressedTextureLoader.textureFormats[format])\n                {\n                    textureURL = url;\n                    break;\n                }\n            }\n\n            textureURL = textureURL || fallbackURL;\n\n            // Make sure we have a URL\n            if (!textureURL)\n            {\n                next(new Error(`Cannot load compressed-textures in ${resource.url}, make sure you provide a fallback`));\n\n                return;\n            }\n            if (textureURL === resource.url)\n            {\n                // Prevent infinite loops\n                next(new Error('URL of compressed texture cannot be the same as the manifest\\'s URL'));\n\n                return;\n            }\n\n            const loadOptions = {\n                crossOrigin: resource.crossOrigin,\n                metadata: resource.metadata.imageMetadata,\n                parentResource: resource\n            };\n\n            const resourcePath = url.resolve(resource.url.replace(loader.baseUrl, ''), textureURL);\n            const resourceName = data.cacheID;\n\n            // The appropriate loader should register the texture\n            loader.add(resourceName, resourcePath, loadOptions, (res: LoaderResource) =>\n            {\n                if (res.error)\n                {\n                    next(res.error);\n\n                    return;\n                }\n\n                const { texture = null, textures = {} } = res;\n\n                // Make sure texture/textures is assigned to parent resource\n                Object.assign(resource, { texture, textures });\n\n                // Pass along any error\n                next();\n            });\n        }\n        else\n        {\n            next();\n        }\n    }\n\n    /**  Map of available texture extensions. */\n    public static get textureExtensions(): Partial<CompressedTextureExtensions>\n    {\n        if (!CompressedTextureLoader._textureExtensions)\n        {\n            // Auto-detect WebGL compressed-texture extensions\n            const canvas = document.createElement('canvas');\n            const gl = canvas.getContext('webgl');\n\n            if (!gl)\n            {\n                // #if _DEBUG\n                console.warn('WebGL not available for compressed textures. Silently failing.');\n                // #endif\n\n                return {};\n            }\n\n            const extensions = {\n                s3tc: gl.getExtension('WEBGL_compressed_texture_s3tc'),\n                s3tc_sRGB: gl.getExtension('WEBGL_compressed_texture_s3tc_srgb'), /* eslint-disable-line camelcase */\n                etc: gl.getExtension('WEBGL_compressed_texture_etc'),\n                etc1: gl.getExtension('WEBGL_compressed_texture_etc1'),\n                pvrtc: gl.getExtension('WEBGL_compressed_texture_pvrtc')\n                    || gl.getExtension('WEBKIT_WEBGL_compressed_texture_pvrtc'),\n                atc: gl.getExtension('WEBGL_compressed_texture_atc'),\n                astc: gl.getExtension('WEBGL_compressed_texture_astc')\n            };\n\n            CompressedTextureLoader._textureExtensions = extensions;\n        }\n\n        return CompressedTextureLoader._textureExtensions;\n    }\n\n    /** Map of available texture formats. */\n    public static get textureFormats(): { [P in keyof INTERNAL_FORMATS]?: number }\n    {\n        if (!CompressedTextureLoader._textureFormats)\n        {\n            const extensions = CompressedTextureLoader.textureExtensions;\n\n            CompressedTextureLoader._textureFormats = {};\n\n            // Assign all available compressed-texture formats\n            for (const extensionName in extensions)\n            {\n                const extension = extensions[extensionName as CompressedTextureExtensionRef];\n\n                if (!extension)\n                {\n                    continue;\n                }\n\n                Object.assign(\n                    CompressedTextureLoader._textureFormats,\n                    Object.getPrototypeOf(extension));\n            }\n        }\n\n        return CompressedTextureLoader._textureFormats;\n    }\n}\n","import { MIPMAP_MODES, ALPHA_MODES } from '@pixi/constants';\nimport { BaseTexture, Texture } from '@pixi/core';\n\nimport type { LoaderResource, IResourceMetadata } from '@pixi/loaders';\nimport type { CompressedTextureResource } from '../resources/CompressedTextureResource';\n\n/**\n * Result when calling registerCompressedTextures.\n * @ignore\n */\ntype CompressedTexturesResult = Pick<LoaderResource, 'textures' | 'texture'>;\n\n/**\n * Creates base-textures and textures for each compressed-texture resource and adds them into the global\n * texture cache. The first texture has two IDs - `${url}`, `${url}-1`; while the rest have an ID of the\n * form `${url}-i`.\n *\n * @param url - the original address of the resources\n * @param resources - the resources backing texture data\n * @ignore\n */\nexport function registerCompressedTextures(url: string,\n    resources: CompressedTextureResource[],\n    metadata: IResourceMetadata): CompressedTexturesResult\n{\n    const result: CompressedTexturesResult = {\n        textures: {},\n        texture: null,\n    };\n\n    if (!resources)\n    {\n        return result;\n    }\n\n    const textures = resources.map((resource) =>\n        (\n            new Texture(new BaseTexture(resource, Object.assign({\n                mipmap: MIPMAP_MODES.OFF,\n                alphaMode: ALPHA_MODES.NO_PREMULTIPLIED_ALPHA\n            }, metadata)))\n        ));\n\n    textures.forEach((texture, i) =>\n    {\n        const { baseTexture } = texture;\n        const cacheID = `${url}-${i + 1}`;\n\n        BaseTexture.addToCache(baseTexture, cacheID);\n        Texture.addToCache(texture, cacheID);\n\n        if (i === 0)\n        {\n            BaseTexture.addToCache(baseTexture, url);\n            Texture.addToCache(texture, url);\n            result.texture = texture;\n        }\n\n        result.textures[cacheID] = texture;\n    });\n\n    return result;\n}\n","import { CompressedTextureResource } from '../resources';\nimport { INTERNAL_FORMATS, INTERNAL_FORMAT_TO_BYTES_PER_PIXEL } from '../const';\nimport { LoaderResource } from '@pixi/loaders';\nimport { registerCompressedTextures } from './registerCompressedTextures';\n\n// Set DDS files to be loaded as an ArrayBuffer\nLoaderResource.setExtensionXhrType('dds', LoaderResource.XHR_RESPONSE_TYPE.BUFFER);\n\nconst DDS_MAGIC_SIZE = 4;\nconst DDS_HEADER_SIZE = 124;\nconst DDS_HEADER_PF_SIZE = 32;\nconst DDS_HEADER_DX10_SIZE = 20;\n\n// DDS file format magic word\nconst DDS_MAGIC = 0x20534444;\n\n/**\n * DWORD offsets of the DDS file header fields (relative to file start).\n *\n * @ignore\n */\nconst DDS_FIELDS = {\n    SIZE: 1,\n    FLAGS: 2,\n    HEIGHT: 3,\n    WIDTH: 4,\n    MIPMAP_COUNT: 7,\n    PIXEL_FORMAT: 19,\n};\n\n/**\n * DWORD offsets of the DDS PIXEL_FORMAT fields.\n *\n * @ignore\n */\nconst DDS_PF_FIELDS = {\n    SIZE: 0,\n    FLAGS: 1,\n    FOURCC: 2,\n    RGB_BITCOUNT: 3,\n    R_BIT_MASK: 4,\n    G_BIT_MASK: 5,\n    B_BIT_MASK: 6,\n    A_BIT_MASK: 7\n};\n\n/**\n * DWORD offsets of the DDS_HEADER_DX10 fields.\n *\n * @ignore\n */\nconst DDS_DX10_FIELDS = {\n    DXGI_FORMAT: 0,\n    RESOURCE_DIMENSION: 1,\n    MISC_FLAG: 2,\n    ARRAY_SIZE: 3,\n    MISC_FLAGS2: 4\n};\n\n/**\n * @see https://docs.microsoft.com/en-us/windows/win32/api/dxgiformat/ne-dxgiformat-dxgi_format\n * @ignore\n */\n// This is way over-blown for us! Lend us a hand, and remove the ones that aren't used (but set the remaining\n// ones to their correct value)\nenum DXGI_FORMAT {\n    DXGI_FORMAT_UNKNOWN,\n    DXGI_FORMAT_R32G32B32A32_TYPELESS,\n    DXGI_FORMAT_R32G32B32A32_FLOAT,\n    DXGI_FORMAT_R32G32B32A32_UINT,\n    DXGI_FORMAT_R32G32B32A32_SINT,\n    DXGI_FORMAT_R32G32B32_TYPELESS,\n    DXGI_FORMAT_R32G32B32_FLOAT,\n    DXGI_FORMAT_R32G32B32_UINT,\n    DXGI_FORMAT_R32G32B32_SINT,\n    DXGI_FORMAT_R16G16B16A16_TYPELESS,\n    DXGI_FORMAT_R16G16B16A16_FLOAT,\n    DXGI_FORMAT_R16G16B16A16_UNORM,\n    DXGI_FORMAT_R16G16B16A16_UINT,\n    DXGI_FORMAT_R16G16B16A16_SNORM,\n    DXGI_FORMAT_R16G16B16A16_SINT,\n    DXGI_FORMAT_R32G32_TYPELESS,\n    DXGI_FORMAT_R32G32_FLOAT,\n    DXGI_FORMAT_R32G32_UINT,\n    DXGI_FORMAT_R32G32_SINT,\n    DXGI_FORMAT_R32G8X24_TYPELESS,\n    DXGI_FORMAT_D32_FLOAT_S8X24_UINT,\n    DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS,\n    DXGI_FORMAT_X32_TYPELESS_G8X24_UINT,\n    DXGI_FORMAT_R10G10B10A2_TYPELESS,\n    DXGI_FORMAT_R10G10B10A2_UNORM,\n    DXGI_FORMAT_R10G10B10A2_UINT,\n    DXGI_FORMAT_R11G11B10_FLOAT,\n    DXGI_FORMAT_R8G8B8A8_TYPELESS,\n    DXGI_FORMAT_R8G8B8A8_UNORM,\n    DXGI_FORMAT_R8G8B8A8_UNORM_SRGB,\n    DXGI_FORMAT_R8G8B8A8_UINT,\n    DXGI_FORMAT_R8G8B8A8_SNORM,\n    DXGI_FORMAT_R8G8B8A8_SINT,\n    DXGI_FORMAT_R16G16_TYPELESS,\n    DXGI_FORMAT_R16G16_FLOAT,\n    DXGI_FORMAT_R16G16_UNORM,\n    DXGI_FORMAT_R16G16_UINT,\n    DXGI_FORMAT_R16G16_SNORM,\n    DXGI_FORMAT_R16G16_SINT,\n    DXGI_FORMAT_R32_TYPELESS,\n    DXGI_FORMAT_D32_FLOAT,\n    DXGI_FORMAT_R32_FLOAT,\n    DXGI_FORMAT_R32_UINT,\n    DXGI_FORMAT_R32_SINT,\n    DXGI_FORMAT_R24G8_TYPELESS,\n    DXGI_FORMAT_D24_UNORM_S8_UINT,\n    DXGI_FORMAT_R24_UNORM_X8_TYPELESS,\n    DXGI_FORMAT_X24_TYPELESS_G8_UINT,\n    DXGI_FORMAT_R8G8_TYPELESS,\n    DXGI_FORMAT_R8G8_UNORM,\n    DXGI_FORMAT_R8G8_UINT,\n    DXGI_FORMAT_R8G8_SNORM,\n    DXGI_FORMAT_R8G8_SINT,\n    DXGI_FORMAT_R16_TYPELESS,\n    DXGI_FORMAT_R16_FLOAT,\n    DXGI_FORMAT_D16_UNORM,\n    DXGI_FORMAT_R16_UNORM,\n    DXGI_FORMAT_R16_UINT,\n    DXGI_FORMAT_R16_SNORM,\n    DXGI_FORMAT_R16_SINT,\n    DXGI_FORMAT_R8_TYPELESS,\n    DXGI_FORMAT_R8_UNORM,\n    DXGI_FORMAT_R8_UINT,\n    DXGI_FORMAT_R8_SNORM,\n    DXGI_FORMAT_R8_SINT,\n    DXGI_FORMAT_A8_UNORM,\n    DXGI_FORMAT_R1_UNORM,\n    DXGI_FORMAT_R9G9B9E5_SHAREDEXP,\n    DXGI_FORMAT_R8G8_B8G8_UNORM,\n    DXGI_FORMAT_G8R8_G8B8_UNORM,\n    DXGI_FORMAT_BC1_TYPELESS,\n    DXGI_FORMAT_BC1_UNORM,\n    DXGI_FORMAT_BC1_UNORM_SRGB,\n    DXGI_FORMAT_BC2_TYPELESS,\n    DXGI_FORMAT_BC2_UNORM,\n    DXGI_FORMAT_BC2_UNORM_SRGB,\n    DXGI_FORMAT_BC3_TYPELESS,\n    DXGI_FORMAT_BC3_UNORM,\n    DXGI_FORMAT_BC3_UNORM_SRGB,\n    DXGI_FORMAT_BC4_TYPELESS,\n    DXGI_FORMAT_BC4_UNORM,\n    DXGI_FORMAT_BC4_SNORM,\n    DXGI_FORMAT_BC5_TYPELESS,\n    DXGI_FORMAT_BC5_UNORM,\n    DXGI_FORMAT_BC5_SNORM,\n    DXGI_FORMAT_B5G6R5_UNORM,\n    DXGI_FORMAT_B5G5R5A1_UNORM,\n    DXGI_FORMAT_B8G8R8A8_UNORM,\n    DXGI_FORMAT_B8G8R8X8_UNORM,\n    DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM,\n    DXGI_FORMAT_B8G8R8A8_TYPELESS,\n    DXGI_FORMAT_B8G8R8A8_UNORM_SRGB,\n    DXGI_FORMAT_B8G8R8X8_TYPELESS,\n    DXGI_FORMAT_B8G8R8X8_UNORM_SRGB,\n    DXGI_FORMAT_BC6H_TYPELESS,\n    DXGI_FORMAT_BC6H_UF16,\n    DXGI_FORMAT_BC6H_SF16,\n    DXGI_FORMAT_BC7_TYPELESS,\n    DXGI_FORMAT_BC7_UNORM,\n    DXGI_FORMAT_BC7_UNORM_SRGB,\n    DXGI_FORMAT_AYUV,\n    DXGI_FORMAT_Y410,\n    DXGI_FORMAT_Y416,\n    DXGI_FORMAT_NV12,\n    DXGI_FORMAT_P010,\n    DXGI_FORMAT_P016,\n    DXGI_FORMAT_420_OPAQUE,\n    DXGI_FORMAT_YUY2,\n    DXGI_FORMAT_Y210,\n    DXGI_FORMAT_Y216,\n    DXGI_FORMAT_NV11,\n    DXGI_FORMAT_AI44,\n    DXGI_FORMAT_IA44,\n    DXGI_FORMAT_P8,\n    DXGI_FORMAT_A8P8,\n    DXGI_FORMAT_B4G4R4A4_UNORM,\n    DXGI_FORMAT_P208,\n    DXGI_FORMAT_V208,\n    DXGI_FORMAT_V408,\n    DXGI_FORMAT_SAMPLER_FEEDBACK_MIN_MIP_OPAQUE,\n    DXGI_FORMAT_SAMPLER_FEEDBACK_MIP_REGION_USED_OPAQUE,\n    DXGI_FORMAT_FORCE_UINT\n}\n\n/**\n * Possible values of the field {@link DDS_DX10_FIELDS.RESOURCE_DIMENSION}\n *\n * @ignore\n */\nenum D3D10_RESOURCE_DIMENSION {\n    DDS_DIMENSION_TEXTURE1D = 2,\n    DDS_DIMENSION_TEXTURE2D = 3,\n    DDS_DIMENSION_TEXTURE3D = 6\n}\n\nconst PF_FLAGS = 1;\n\n// PIXEL_FORMAT flags\nconst DDPF_ALPHA = 0x2;\nconst DDPF_FOURCC = 0x4;\nconst DDPF_RGB = 0x40;\nconst DDPF_YUV = 0x200;\nconst DDPF_LUMINANCE = 0x20000;\n\n// Four character codes for DXTn formats\nconst FOURCC_DXT1 = 0x31545844;\nconst FOURCC_DXT3 = 0x33545844;\nconst FOURCC_DXT5 = 0x35545844;\nconst FOURCC_DX10 = 0x30315844;\n\n// Cubemap texture flag (for DDS_DX10_FIELDS.MISC_FLAG)\nconst DDS_RESOURCE_MISC_TEXTURECUBE = 0x4;\n\n/**\n * Maps `FOURCC_*` formats to internal formats (see {@link PIXI.INTERNAL_FORMATS}).\n *\n * @ignore\n */\nconst FOURCC_TO_FORMAT: { [id: number]: number } = {\n    [FOURCC_DXT1]: INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT1_EXT,\n    [FOURCC_DXT3]: INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT3_EXT,\n    [FOURCC_DXT5]: INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT5_EXT\n};\n\n/**\n * Maps {@link DXGI_FORMAT} to types/internal-formats (see {@link PIXI.TYPES}, {@link PIXI.INTERNAL_FORMATS})\n *\n * @ignore\n */\nconst DXGI_TO_FORMAT: { [id: number]: number } = {\n    // WEBGL_compressed_texture_s3tc\n    [DXGI_FORMAT.DXGI_FORMAT_BC1_TYPELESS]: INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT1_EXT,\n    [DXGI_FORMAT.DXGI_FORMAT_BC1_UNORM]: INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT1_EXT,\n    [DXGI_FORMAT.DXGI_FORMAT_BC2_TYPELESS]: INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT3_EXT,\n    [DXGI_FORMAT.DXGI_FORMAT_BC2_UNORM]: INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT3_EXT,\n    [DXGI_FORMAT.DXGI_FORMAT_BC3_TYPELESS]: INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT5_EXT,\n    [DXGI_FORMAT.DXGI_FORMAT_BC3_UNORM]: INTERNAL_FORMATS.COMPRESSED_RGBA_S3TC_DXT5_EXT,\n\n    // WEBGL_compressed_texture_s3tc_srgb\n    [DXGI_FORMAT.DXGI_FORMAT_BC1_UNORM_SRGB]: INTERNAL_FORMATS.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT,\n    [DXGI_FORMAT.DXGI_FORMAT_BC2_UNORM_SRGB]: INTERNAL_FORMATS.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT,\n    [DXGI_FORMAT.DXGI_FORMAT_BC3_UNORM_SRGB]: INTERNAL_FORMATS.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT\n};\n\n/**\n * @class\n * @memberof PIXI\n * @implements PIXI.ILoaderPlugin\n * @see https://docs.microsoft.com/en-us/windows/win32/direct3ddds/dx-graphics-dds-pguide\n */\nexport class DDSLoader\n{\n    /**\n     * Registers a DDS compressed texture\n     * @see PIXI.Loader.loaderMiddleware\n     * @param resource - loader resource that is checked to see if it is a DDS file\n     * @param next - callback Function to call when done\n     */\n    public static use(resource: LoaderResource, next: (...args: any[]) => void): void\n    {\n        if (resource.extension === 'dds' && resource.data)\n        {\n            try\n            {\n                Object.assign(resource, registerCompressedTextures(\n                    resource.name || resource.url,\n                    DDSLoader.parse(resource.data),\n                    resource.metadata,\n                ));\n            }\n            catch (err)\n            {\n                next(err);\n\n                return;\n            }\n        }\n\n        next();\n    }\n\n    /** Parses the DDS file header, generates base-textures, and puts them into the texture cache. */\n    private static parse(arrayBuffer: ArrayBuffer): CompressedTextureResource[]\n    {\n        const data = new Uint32Array(arrayBuffer);\n        const magicWord = data[0];\n\n        if (magicWord !== DDS_MAGIC)\n        {\n            throw new Error('Invalid DDS file magic word');\n        }\n\n        const header = new Uint32Array(arrayBuffer, 0, DDS_HEADER_SIZE / Uint32Array.BYTES_PER_ELEMENT);\n\n        // DDS header fields\n        const height = header[DDS_FIELDS.HEIGHT];\n        const width = header[DDS_FIELDS.WIDTH];\n        const mipmapCount = header[DDS_FIELDS.MIPMAP_COUNT];\n\n        // PIXEL_FORMAT fields\n        const pixelFormat = new Uint32Array(\n            arrayBuffer,\n            DDS_FIELDS.PIXEL_FORMAT * Uint32Array.BYTES_PER_ELEMENT,\n            DDS_HEADER_PF_SIZE / Uint32Array.BYTES_PER_ELEMENT);\n        const formatFlags = pixelFormat[PF_FLAGS];\n\n        // File contains compressed texture(s)\n        if (formatFlags & DDPF_FOURCC)\n        {\n            const fourCC = pixelFormat[DDS_PF_FIELDS.FOURCC];\n\n            // File contains one DXTn compressed texture\n            if (fourCC !== FOURCC_DX10)\n            {\n                const internalFormat = FOURCC_TO_FORMAT[fourCC];\n\n                const dataOffset = DDS_MAGIC_SIZE + DDS_HEADER_SIZE;\n                const texData = new Uint8Array(arrayBuffer, dataOffset);\n\n                const resource = new CompressedTextureResource(texData, {\n                    format: internalFormat,\n                    width,\n                    height,\n                    levels: mipmapCount // CompressedTextureResource will separate the levelBuffers for us!\n                });\n\n                return [resource];\n            }\n\n            // FOURCC_DX10 indicates there is a 20-byte DDS_HEADER_DX10 after DDS_HEADER\n            const dx10Offset = DDS_MAGIC_SIZE + DDS_HEADER_SIZE;\n            const dx10Header = new Uint32Array(\n                data.buffer,\n                dx10Offset,\n                DDS_HEADER_DX10_SIZE / Uint32Array.BYTES_PER_ELEMENT);\n            const dxgiFormat = dx10Header[DDS_DX10_FIELDS.DXGI_FORMAT];\n            const resourceDimension = dx10Header[DDS_DX10_FIELDS.RESOURCE_DIMENSION];\n            const miscFlag = dx10Header[DDS_DX10_FIELDS.MISC_FLAG];\n            const arraySize = dx10Header[DDS_DX10_FIELDS.ARRAY_SIZE];\n\n            // Map dxgiFormat to PIXI.INTERNAL_FORMATS\n            const internalFormat = DXGI_TO_FORMAT[dxgiFormat];\n\n            if (internalFormat === undefined)\n            {\n                throw new Error(`DDSLoader cannot parse texture data with DXGI format ${dxgiFormat}`);\n            }\n            if (miscFlag === DDS_RESOURCE_MISC_TEXTURECUBE)\n            {\n                // FIXME: Anybody excited about cubemap compressed textures?\n                throw new Error('DDSLoader does not support cubemap textures');\n            }\n            if (resourceDimension === D3D10_RESOURCE_DIMENSION.DDS_DIMENSION_TEXTURE3D)\n            {\n                // FIXME: Anybody excited about 3D compressed textures?\n                throw new Error('DDSLoader does not supported 3D texture data');\n            }\n\n            // Uint8Array buffers of image data, including all mipmap levels in each image\n            const imageBuffers = new Array<Uint8Array>();\n            const dataOffset = DDS_MAGIC_SIZE\n                + DDS_HEADER_SIZE\n                + DDS_HEADER_DX10_SIZE;\n\n            if (arraySize === 1)\n            {\n                // No need bothering with the imageSize calculation!\n                imageBuffers.push(new Uint8Array(arrayBuffer, dataOffset));\n            }\n            else\n            {\n                // Calculate imageSize for each texture, and then locate each image's texture data\n\n                const pixelSize = INTERNAL_FORMAT_TO_BYTES_PER_PIXEL[internalFormat];\n                let imageSize = 0;\n                let levelWidth = width;\n                let levelHeight = height;\n\n                for (let i = 0; i < mipmapCount; i++)\n                {\n                    const alignedLevelWidth = Math.max(1, (levelWidth + 3) & ~3);\n                    const alignedLevelHeight = Math.max(1, (levelHeight + 3) & ~3);\n\n                    const levelSize = alignedLevelWidth * alignedLevelHeight * pixelSize;\n\n                    imageSize += levelSize;\n\n                    levelWidth = levelWidth >>> 1;\n                    levelHeight = levelHeight >>> 1;\n                }\n\n                let imageOffset = dataOffset;\n\n                // NOTE: Cubemaps have 6-images per texture (but they aren't supported so ^_^)\n                for (let i = 0; i < arraySize; i++)\n                {\n                    imageBuffers.push(new Uint8Array(arrayBuffer, imageOffset, imageSize));\n                    imageOffset += imageSize;\n                }\n            }\n\n            // Uint8Array -> CompressedTextureResource, and we're done!\n            return imageBuffers.map((buffer) => new CompressedTextureResource(buffer, {\n                format: internalFormat,\n                width,\n                height,\n                levels: mipmapCount\n            }));\n        }\n        if (formatFlags & DDPF_RGB)\n        {\n            // FIXME: We might want to allow uncompressed *.dds files?\n            throw new Error('DDSLoader does not support uncompressed texture data.');\n        }\n        if (formatFlags & DDPF_YUV)\n        {\n            // FIXME: Does anybody need this feature?\n            throw new Error('DDSLoader does not supported YUV uncompressed texture data.');\n        }\n        if (formatFlags & DDPF_LUMINANCE)\n        {\n            // FIXME: Microsoft says older DDS filers use this feature! Probably not worth the effort!\n            throw new Error('DDSLoader does not support single-channel (lumninance) texture data!');\n        }\n        if (formatFlags & DDPF_ALPHA)\n        {\n            // FIXME: I'm tired! See above =)\n            throw new Error('DDSLoader does not support single-channel (alpha) texture data!');\n        }\n\n        throw new Error('DDSLoader failed to load a texture file due to an unknown reason!');\n    }\n}\n","import { ALPHA_MODES, FORMATS, MIPMAP_MODES, TYPES } from '@pixi/constants';\nimport { BaseTexture, BufferResource, Texture } from '@pixi/core';\nimport { CompressedLevelBuffer, CompressedTextureResource } from '../resources/CompressedTextureResource';\nimport { LoaderResource } from '@pixi/loaders';\nimport { INTERNAL_FORMAT_TO_BYTES_PER_PIXEL } from '../const';\nimport { registerCompressedTextures } from './registerCompressedTextures';\n\n// Set KTX files to be loaded as an ArrayBuffer\nLoaderResource.setExtensionXhrType('ktx', LoaderResource.XHR_RESPONSE_TYPE.BUFFER);\n\n/**\n * The 12-byte KTX file identifier\n *\n * @see https://www.khronos.org/opengles/sdk/tools/KTX/file_format_spec/#2.1\n * @ignore\n */\nconst FILE_IDENTIFIER = [0xAB, 0x4B, 0x54, 0x58, 0x20, 0x31, 0x31, 0xBB, 0x0D, 0x0A, 0x1A, 0x0A];\n\n/**\n * The value stored in the \"endianness\" field.\n *\n * @see https://www.khronos.org/opengles/sdk/tools/KTX/file_format_spec/#2.2\n * @ignore\n */\nconst ENDIANNESS = 0x04030201;\n\n/**\n * Byte offsets of the KTX file header fields\n *\n * @ignore\n */\nconst KTX_FIELDS = {\n    FILE_IDENTIFIER: 0,\n    ENDIANNESS: 12,\n    GL_TYPE: 16,\n    GL_TYPE_SIZE: 20,\n    GL_FORMAT: 24,\n    GL_INTERNAL_FORMAT: 28,\n    GL_BASE_INTERNAL_FORMAT: 32,\n    PIXEL_WIDTH: 36,\n    PIXEL_HEIGHT: 40,\n    PIXEL_DEPTH: 44,\n    NUMBER_OF_ARRAY_ELEMENTS: 48,\n    NUMBER_OF_FACES: 52,\n    NUMBER_OF_MIPMAP_LEVELS: 56,\n    BYTES_OF_KEY_VALUE_DATA: 60\n};\n\n/**\n * Byte size of the file header fields in {@code KTX_FIELDS}\n *\n * @ignore\n */\nconst FILE_HEADER_SIZE = 64;\n\n/**\n * Maps {@link PIXI.TYPES} to the bytes taken per component, excluding those ones that are bit-fields.\n *\n * @ignore\n */\nexport const TYPES_TO_BYTES_PER_COMPONENT: { [id: number]: number } = {\n    [TYPES.UNSIGNED_BYTE]: 1,\n    [TYPES.UNSIGNED_SHORT]: 2,\n    [TYPES.INT]: 4,\n    [TYPES.UNSIGNED_INT]: 4,\n    [TYPES.FLOAT]: 4,\n    [TYPES.HALF_FLOAT]: 8\n};\n\n/**\n * Number of components in each {@link PIXI.FORMATS}\n *\n * @ignore\n */\nexport const FORMATS_TO_COMPONENTS: { [id: number]: number } = {\n    [FORMATS.RGBA]: 4,\n    [FORMATS.RGB]: 3,\n    [FORMATS.RG]: 2,\n    [FORMATS.RED]: 1,\n    [FORMATS.LUMINANCE]: 1,\n    [FORMATS.LUMINANCE_ALPHA]: 2,\n    [FORMATS.ALPHA]: 1\n};\n\n/**\n * Number of bytes per pixel in bit-field types in {@link PIXI.TYPES}\n *\n * @ignore\n */\nexport const TYPES_TO_BYTES_PER_PIXEL: { [id: number]: number } = {\n    [TYPES.UNSIGNED_SHORT_4_4_4_4]: 2,\n    [TYPES.UNSIGNED_SHORT_5_5_5_1]: 2,\n    [TYPES.UNSIGNED_SHORT_5_6_5]: 2\n};\n\n/**\n * Loader plugin for handling KTX texture container files.\n *\n * This KTX loader does not currently support the following features:\n * * cube textures\n * * 3D textures\n * * vendor-specific key/value data parsing\n * * endianness conversion for big-endian machines\n * * embedded *.basis files\n *\n * It does supports the following features:\n * * multiple textures per file\n * * mipmapping (only for compressed formats)\n *\n * @class\n * @memberof PIXI\n * @implements PIXI.ILoaderPlugin\n */\nexport class KTXLoader\n{\n    /**\n     * Called after a KTX file is loaded.\n     *\n     * This will parse the KTX file header and add a {@code BaseTexture} to the texture\n     * cache.\n     *\n     * @see PIXI.Loader.loaderMiddleware\n     * @param resource - loader resource that is checked to see if it is a KTX file\n     * @param next - callback Function to call when done\n     */\n    public static use(resource: LoaderResource, next: (...args: any[]) => void): void\n    {\n        if (resource.extension === 'ktx' && resource.data)\n        {\n            try\n            {\n                const url = resource.name || resource.url;\n                const { compressed, uncompressed } = KTXLoader.parse(url, resource.data);\n\n                if (compressed)\n                {\n                    Object.assign(resource, registerCompressedTextures(\n                        url,\n                        compressed,\n                        resource.metadata,\n                    ));\n                }\n                else if (uncompressed)\n                {\n                    const textures: Record<string, Texture> = {};\n\n                    uncompressed.forEach((image, i) =>\n                    {\n                        const texture = new Texture(new BaseTexture(\n                            image.resource,\n                            {\n                                mipmap: MIPMAP_MODES.OFF,\n                                alphaMode: ALPHA_MODES.NO_PREMULTIPLIED_ALPHA,\n                                type: image.type,\n                                format: image.format,\n                            }\n                        ));\n                        const cacheID = `${url}-${i + 1}`;\n\n                        BaseTexture.addToCache(texture.baseTexture, cacheID);\n                        Texture.addToCache(texture, cacheID);\n\n                        if (i === 0)\n                        {\n                            textures[url] = texture;\n                            BaseTexture.addToCache(texture.baseTexture, url);\n                            Texture.addToCache(texture, url);\n                        }\n\n                        textures[cacheID] = texture;\n                    });\n\n                    Object.assign(resource, { textures });\n                }\n            }\n            catch (err)\n            {\n                next(err);\n\n                return;\n            }\n        }\n\n        next();\n    }\n\n    /** Parses the KTX file header, generates base-textures, and puts them into the texture cache. */\n    private static parse(url: string, arrayBuffer: ArrayBuffer): {\n        compressed?: CompressedTextureResource[]\n        uncompressed?: { resource: BufferResource, type: TYPES, format: FORMATS }[]\n    }\n    {\n        const dataView = new DataView(arrayBuffer);\n\n        if (!KTXLoader.validate(url, dataView))\n        {\n            return null;\n        }\n\n        const littleEndian = dataView.getUint32(KTX_FIELDS.ENDIANNESS, true) === ENDIANNESS;\n        const glType = dataView.getUint32(KTX_FIELDS.GL_TYPE, littleEndian);\n        // const glTypeSize = dataView.getUint32(KTX_FIELDS.GL_TYPE_SIZE, littleEndian);\n        const glFormat = dataView.getUint32(KTX_FIELDS.GL_FORMAT, littleEndian);\n        const glInternalFormat = dataView.getUint32(KTX_FIELDS.GL_INTERNAL_FORMAT, littleEndian);\n        const pixelWidth = dataView.getUint32(KTX_FIELDS.PIXEL_WIDTH, littleEndian);\n        const pixelHeight = dataView.getUint32(KTX_FIELDS.PIXEL_HEIGHT, littleEndian) || 1;// \"pixelHeight = 0\" -> \"1\"\n        const pixelDepth = dataView.getUint32(KTX_FIELDS.PIXEL_DEPTH, littleEndian) || 1;// ^^\n        const numberOfArrayElements = dataView.getUint32(KTX_FIELDS.NUMBER_OF_ARRAY_ELEMENTS, littleEndian) || 1;// ^^\n        const numberOfFaces = dataView.getUint32(KTX_FIELDS.NUMBER_OF_FACES, littleEndian);\n        const numberOfMipmapLevels = dataView.getUint32(KTX_FIELDS.NUMBER_OF_MIPMAP_LEVELS, littleEndian);\n        const bytesOfKeyValueData = dataView.getUint32(KTX_FIELDS.BYTES_OF_KEY_VALUE_DATA, littleEndian);\n\n        // Whether the platform architecture is little endian. If littleEndian !== platformLittleEndian, then the\n        // file contents must be endian-converted!\n        // TODO: Endianness conversion\n        // const platformLittleEndian = new Uint8Array((new Uint32Array([ENDIANNESS])).buffer)[0] === 0x01;\n\n        if (pixelHeight === 0 || pixelDepth !== 1)\n        {\n            throw new Error('Only 2D textures are supported');\n        }\n        if (numberOfFaces !== 1)\n        {\n            throw new Error('CubeTextures are not supported by KTXLoader yet!');\n        }\n        if (numberOfArrayElements !== 1)\n        {\n            // TODO: Support splitting array-textures into multiple BaseTextures\n            throw new Error('WebGL does not support array textures');\n        }\n\n        // TODO: 8x4 blocks for 2bpp pvrtc\n        const blockWidth = 4;\n        const blockHeight = 4;\n\n        const alignedWidth = (pixelWidth + 3) & ~3;\n        const alignedHeight = (pixelHeight + 3) & ~3;\n        const imageBuffers = new Array<CompressedLevelBuffer[]>(numberOfArrayElements);\n        let imagePixels = pixelWidth * pixelHeight;\n\n        if (glType === 0)\n        {\n            // Align to 16 pixels (4x4 blocks)\n            imagePixels = alignedWidth * alignedHeight;\n        }\n\n        let imagePixelByteSize: number;\n\n        if (glType !== 0)\n        {\n            // Uncompressed texture format\n            if (TYPES_TO_BYTES_PER_COMPONENT[glType])\n            {\n                imagePixelByteSize = TYPES_TO_BYTES_PER_COMPONENT[glType] * FORMATS_TO_COMPONENTS[glFormat];\n            }\n            else\n            {\n                imagePixelByteSize = TYPES_TO_BYTES_PER_PIXEL[glType];\n            }\n        }\n        else\n        {\n            imagePixelByteSize = INTERNAL_FORMAT_TO_BYTES_PER_PIXEL[glInternalFormat];\n        }\n\n        if (imagePixelByteSize === undefined)\n        {\n            throw new Error('Unable to resolve the pixel format stored in the *.ktx file!');\n        }\n\n        const imageByteSize = imagePixels * imagePixelByteSize;\n        let mipByteSize = imageByteSize;\n        let mipWidth = pixelWidth;\n        let mipHeight = pixelHeight;\n        let alignedMipWidth = alignedWidth;\n        let alignedMipHeight = alignedHeight;\n        let imageOffset = FILE_HEADER_SIZE + bytesOfKeyValueData;\n\n        for (let mipmapLevel = 0; mipmapLevel < numberOfMipmapLevels; mipmapLevel++)\n        {\n            const imageSize = dataView.getUint32(imageOffset, littleEndian);\n            let elementOffset = imageOffset + 4;\n\n            for (let arrayElement = 0; arrayElement < numberOfArrayElements; arrayElement++)\n            {\n                // TODO: Maybe support 3D textures? :-)\n                // for (let zSlice = 0; zSlice < pixelDepth; zSlice)\n\n                let mips = imageBuffers[arrayElement];\n\n                if (!mips)\n                {\n                    mips = imageBuffers[arrayElement] = new Array(numberOfMipmapLevels);\n                }\n\n                mips[mipmapLevel] = {\n                    levelID: mipmapLevel,\n\n                    // don't align mipWidth when texture not compressed! (glType not zero)\n                    levelWidth: numberOfMipmapLevels > 1 || glType !== 0 ? mipWidth : alignedMipWidth,\n                    levelHeight: numberOfMipmapLevels > 1 || glType !== 0 ? mipHeight : alignedMipHeight,\n                    levelBuffer: new Uint8Array(arrayBuffer, elementOffset, mipByteSize)\n                };\n                elementOffset += mipByteSize;\n            }\n\n            // HINT: Aligns to 4-byte boundary after jumping imageSize (in lieu of mipPadding)\n            imageOffset += imageSize + 4;// (+4 to jump the imageSize field itself)\n            imageOffset = imageOffset % 4 !== 0 ? imageOffset + 4 - (imageOffset % 4) : imageOffset;\n\n            // Calculate mipWidth, mipHeight for _next_ iteration\n            mipWidth = (mipWidth >> 1) || 1;\n            mipHeight = (mipHeight >> 1) || 1;\n            alignedMipWidth = (mipWidth + blockWidth - 1) & ~(blockWidth - 1);\n            alignedMipHeight = (mipHeight + blockHeight - 1) & ~(blockHeight - 1);\n\n            // Each mipmap level is 4-times smaller?\n            mipByteSize = alignedMipWidth * alignedMipHeight * imagePixelByteSize;\n        }\n\n        // We use the levelBuffers feature of CompressedTextureResource b/c texture data is image-major, not level-major.\n        if (glType !== 0)\n        {\n            return {\n                uncompressed: imageBuffers.map((levelBuffers) =>\n                {\n                    let buffer: Float32Array | Uint32Array | Int32Array | Uint8Array = levelBuffers[0].levelBuffer;\n                    let convertToInt = false;\n\n                    if (glType === TYPES.FLOAT)\n                    {\n                        buffer = new Float32Array(\n                            levelBuffers[0].levelBuffer.buffer,\n                            levelBuffers[0].levelBuffer.byteOffset,\n                            levelBuffers[0].levelBuffer.byteLength / 4);\n                    }\n                    else if (glType === TYPES.UNSIGNED_INT)\n                    {\n                        convertToInt = true;\n                        buffer = new Uint32Array(\n                            levelBuffers[0].levelBuffer.buffer,\n                            levelBuffers[0].levelBuffer.byteOffset,\n                            levelBuffers[0].levelBuffer.byteLength / 4);\n                    }\n                    else if (glType === TYPES.INT)\n                    {\n                        convertToInt = true;\n                        buffer = new Int32Array(\n                            levelBuffers[0].levelBuffer.buffer,\n                            levelBuffers[0].levelBuffer.byteOffset,\n                            levelBuffers[0].levelBuffer.byteLength / 4);\n                    }\n\n                    return {\n                        resource: new BufferResource(\n                            buffer,\n                            {\n                                width: levelBuffers[0].levelWidth,\n                                height: levelBuffers[0].levelHeight,\n                            }\n                        ),\n                        type: glType,\n                        format: convertToInt ? KTXLoader.convertFormatToInteger(glFormat) : glFormat,\n                    };\n                })\n            };\n        }\n\n        return {\n            compressed: imageBuffers.map((levelBuffers) => new CompressedTextureResource(null, {\n                format: glInternalFormat,\n                width: pixelWidth,\n                height: pixelHeight,\n                levels: numberOfMipmapLevels,\n                levelBuffers,\n            }))\n        };\n    }\n\n    /** Checks whether the arrayBuffer contains a valid *.ktx file. */\n    private static validate(url: string, dataView: DataView): boolean\n    {\n        // NOTE: Do not optimize this into 3 32-bit integer comparison because the endianness\n        // of the data is not specified.\n        for (let i = 0; i < FILE_IDENTIFIER.length; i++)\n        {\n            if (dataView.getUint8(i) !== FILE_IDENTIFIER[i])\n            {\n                // #if _DEBUG\n                console.error(`${url} is not a valid *.ktx file!`);\n                // #endif\n\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    private static convertFormatToInteger(format: FORMATS)\n    {\n        switch (format)\n        {\n            case FORMATS.RGBA: return FORMATS.RGBA_INTEGER;\n            case FORMATS.RGB: return FORMATS.RGB_INTEGER;\n            case FORMATS.RG: return FORMATS.RG_INTEGER;\n            case FORMATS.RED: return FORMATS.RED_INTEGER;\n            default: return format;\n        }\n    }\n}\n"],"names":["_a","_b"],"mappings":"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"}